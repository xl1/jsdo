{"name":"6kbB","title":"particle 65536","description":"<div class=\"markdown\"><ul>\n<li>&#x4F9D;&#x5B58;: <a href=\"http://xl1.github.io/microgl/\">MicroGL</a></li>\n<li>GPU &#x306B;&#x306A;&#x308B;&#x3079;&#x304F;&#x8A08;&#x7B97;&#x3055;&#x305B;&#x3066;&#x308B;&#x308F;&#x3051;&#x3060;&#x3051;&#x3069;&#x96E2;&#x6563;&#x7684;&#x306B;&#x306A;&#x308B;&#x306E;&#x3067;&#x3061;&#x3087;&#x3063;&#x3068;&#x5909;</li>\n<li>&#x4E0B;&#x306E; canvas &#x306E;&#x4E0A;&#x534A;&#x5206;&#x304C;&#x4F4D;&#x7F6E;&#x3067;&#x4E0B;&#x534A;&#x5206;&#x304C;&#x901F;&#x5EA6;&#x3092;&#x8868;&#x3057;&#x3066;&#x3044;&#x308B;</li>\n<li>&#x3044;&#x3064;&#x3082;&#x4E00;&#x90E8;&#x306E;&#x7279;&#x5B9A;&#x306E;&#x7C92;&#x5B50;&#x304C;&#x7279;&#x5B9A;&#x306E;&#x5834;&#x6240;&#x30FB;&#x901F;&#x3055;&#x3092;&#x6301;&#x3064;&#x3088;&#x3046;&#x306B;&#x306A;&#x308B;&#x306E;&#x3060;&#x3051;&#x308C;&#x3069;&#x306A;&#x305C;&#x304B;&#x308F;&#x304B;&#x3089;&#x306A;&#x3044;</li>\n</ul>\n\n<h3>2013/8/4 &#x66F4;&#x65B0;</h3>\n\n<ul>\n<li>uniform size &#x3092;&#x9802;&#x70B9;&#x30B7;&#x30A7;&#x30FC;&#x30C0;&#x3067;&#x3082;&#x30D5;&#x30E9;&#x30B0;&#x30E1;&#x30F3;&#x30C8;&#x30B7;&#x30A7;&#x30FC;&#x30C0;&#x3067;&#x3082;&#x4F7F;&#x3063;&#x3066;&#x3044;&#x305F;&#x304C;&#x3001;&#x7CBE;&#x5EA6;&#x3092;&#x63C3;&#x3048;&#x306A;&#x3044;&#x3068;&#x63CF;&#x753B;&#x3055;&#x308C;&#x306A;&#x304F;&#x306A;&#x3063;&#x3066;&#x3044;&#x305F;&#xFF08;Chrome 30 dev&#xFF09;&#x305F;&#x3081;&#x7CBE;&#x5EA6;&#x3092;&#x63C3;&#x3048;&#x305F;</li>\n</ul>\n</div>","libraries":["/xl1/eHqL"],"js":{"language":"coffeescript","content":"# shader programs\nvshader = '''\n  attribute vec4 position;\n  uniform mediump float size;\n  void main(){\n    gl_Position = vec4(position.xy * 2.0 / size - vec2(1.0), 0.0, 1.0);\n    gl_PointSize = 1.0;\n  }\n'''\n\nfshader = \n  map: '''\n    precision mediump float;\n    uniform sampler2D previous;\n    uniform vec2 mouse;\n    uniform float size;\n\n    vec2 random(){\n      return sin(gl_FragCoord.yx * vec2(1234.5, 678.9));\n    }\n\n    void main(){\n      vec2 result;\n      vec2 ref = gl_FragCoord.xy / vec2(size, size * 2.0);\n      vec2 velref = mod(ref, vec2(1.0, 0.5));\n      vec2 posref = velref + vec2(0.0, 0.5);\n      vec2 vel = texture2D(previous, velref).xy - vec2(0.5);\n      vec2 pos = texture2D(previous, posref).xy;\n      vec2 dif = mouse - pos;\n      float len2 = dif.x * dif.x + dif.y * dif.y;\n      if(ref.y < 0.5){\n        // lower half: velocity\n        result = 0.97 * vel + 0.009 * dif / len2 + 0.002 * random() + vec2(0.5);\n      } else {\n        // upper half: position\n        result = fract(0.07 * vel + pos);\n      }\n      gl_FragColor = vec4(result, 0.0, 1.0);\n    }\n  '''\n  main: '''\n    precision mediump float;\n    void main(){\n      gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);\n    }\n  '''\n\n# main\nsize = 256\ngl = new MicroGL(antialias: false)\nglMain = new MicroGL(antialias: false)\nframe = null\nmouse = { x:0.5, y:0.5 }\n\ninitMap = ->\n  ctx = document.createElement('canvas').getContext '2d'\n  ctx.canvas.width = size\n  ctx.canvas.height = size * 2\n  idata = ctx.createImageData(size, size * 2)\n  for idx in [0...size * size * 8] by 4\n    idata.data.set [\n      Math.random() * 256\n      Math.random() * 256\n      0, 255\n    ], idx\n  ctx.putImageData(idata, 0, 0)\n  gl.bindVars(\n      previous: ctx.canvas\n      mouse: [mouse.x, mouse.y]\n    )\n    .drawFrame(frame)\n\nmain = ->\n  glMain.init(document.body, 256, 256)\n    .program(vshader, fshader.main)\n    .bindVars(size: 256)\n  glMain.gl.canvas.addEventListener 'mousemove', (e) ->\n    mouse.x = e.offsetX / @offsetWidth\n    mouse.y = 1 - e.offsetY / @offsetHeight\n  , false\n    \n  gl.init(document.body, size, size * 2)\n    .program(vshader, fshader.map)\n    .bindVars(\n      position: [0,0,0,0,0,size,0,0,size,0,0,0,size,size,0,0]\n      size: size\n    )\n  frame = gl.frame()\n\n  initMap()\n  update()\n\nupdate = ->\n  # update position & velocity map\n  gl.bindVars(\n      previous: frame.color\n      mouse: [mouse.x, mouse.y]\n    )\n    .clear()\n    .draw()\n    .drawFrame(frame)\n  # draw particles\n  glMain\n    .bindVars(\n      position: gl.read().subarray(size * size * 4)\n    )\n    .clear()\n    .draw('POINTS')\n\n  requestAnimationFrame update\n\nmain()"},"html":{"language":"html","content":""},"css":{"language":"css","content":"* {\n  margin: 0;\n  padding: 0;\n  border: 0;\n}"},"published":"2013-08-04T20:49:41"}