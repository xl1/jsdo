{"name":"645e","title":"[library] js-aruco/cv.js","description":"js-aruco: <a href=\"http://code.google.com/p/js-aruco/\">http://code.google.com/p/js-aruco/</a><br>\n<br>\njs-aruco &#x306F; Juan Mellado &#x306B;&#x3088;&#x308B; ArUco &#x306E; JavaScript &#x3078;&#x306E;&#x79FB;&#x690D;&#x3067;&#x3059;<br>\nArUco: <a href=\"http://www.uco.es/investiga/grupos/ava/node/26\">http://www.uco.es/investiga/grupos/ava/node/26</a><br>\nArUco &#x306F; OpenCV &#x3092;&#x5229;&#x7528;&#x3057;&#x3066;&#x3044;&#x307E;&#x3059;<br>\nOpen Computer Vision Library: <a href=\"http://sourceforge.net/projects/opencvlibrary/\">http://sourceforge.net/projects/opencvlibrary/</a>","libraries":[],"js":{"language":"js","content":"/*\njs-aruco は MIT License のもとでライセンスされています\n*//*\nCopyright (c) 2011 Juan Mellado\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n/*\nArUco は BSD License のもとでライセンスされています\n*//*\nBSD License\n*/\n\n/*\nOpenCV は BSD License のもとでライセンスされています\n*//*\n IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.\n\n By downloading, copying, installing or using the software you agree to this license.\n If you do not agree to this license, do not download, install,\n copy or use the software.\n\n\n                          License Agreement\n                For Open Source Computer Vision Library\n\nCopyright (C) 2000-2008, Intel Corporation, all rights reserved.\nCopyright (C) 2009, Willow Garage Inc., all rights reserved.\nThird party copyrights are property of their respective owners.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistribution's of source code must retain the above copyright notice,\n    this list of conditions and the following disclaimer.\n\n  * Redistribution's in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n\n  * The name of the copyright holders may not be used to endorse or promote products\n    derived from this software without specific prior written permission.\n\nThis software is provided by the copyright holders and contributors \"as is\" and\nany express or implied warranties, including, but not limited to, the implied\nwarranties of merchantability and fitness for a particular purpose are disclaimed.\nIn no event shall the Intel Corporation or contributors be liable for any direct,\nindirect, incidental, special, exemplary, or consequential damages\n(including, but not limited to, procurement of substitute goods or services;\nloss of use, data, or profits; or business interruption) however caused\nand on any theory of liability, whether in contract, strict liability,\nor tort (including negligence or otherwise) arising in any way out of\nthe use of this software, even if advised of the possibility of such damage.\n*/\n\n\n\nvar CV = CV || {};\n\nCV.Image = function(width, height, data){\n  this.width = width || 0;\n  this.height = height || 0;\n  this.data = data || [];\n};\n\nCV.grayscale = function(imageSrc, imageDst){\n  var src = imageSrc.data, dst = imageDst.data, len = src.length,\n      i = 0, j = 0;\n\n  for (; i !== len; i += 4){\n    dst[j ++] =\n      (src[i] * 0.299 + src[i + 1] * 0.587 + src[i + 2] * 0.114 + 0.5) & 0xff;\n  }\n  \n  imageDst.width = imageSrc.width;\n  imageDst.height = imageSrc.height;\n  \n  return imageDst;\n};\n\nCV.threshold = function(imageSrc, imageDst, threshold){\n  var src = imageSrc.data, dst = imageDst.data, tab = [], i;\n\n  i = 256;\n  while(i --){\n    tab[i] = i <= threshold? 0: 255;\n  }\n\n  i = src.length;\n  while(i --){\n    dst[i] = tab[ src[i] ];\n  }\n\n  imageDst.width = imageSrc.width;\n  imageDst.height = imageSrc.height;\n\n  return imageDst;\n};\n\nCV.adaptiveThreshold = function(imageSrc, imageDst, imageMean, kernelSize, threshold){\n  var src = imageSrc.data, dst = imageDst.data, len = src.length, tab = [],\n      mean, i;\n\n  mean = CV.gaussianBlur(imageSrc, imageDst, imageMean, kernelSize).data;\n\n  i = 768;\n  while(i --){\n    tab[i] = (i - 255 <= -threshold)? 255: 0;\n  }\n\n  i = len;\n  while(i --){\n    dst[i] = tab[ src[i] - mean[i] + 255 ];\n  }\n\n  imageDst.width = imageSrc.width;\n  imageDst.height = imageSrc.height;\n  \n  return imageDst;\n};\n\nCV.otsu = function(imageSrc){\n  var src = imageSrc.data, len = src.length, hist = [],\n      threshold = 0, sum = 0, sumB = 0, wB = 0, wF = 0, max = 0,\n      mu, between, i;\n\n  i = 256;\n  while(i --){\n    hist[i] = 0;\n  }\n  \n  i = len;\n  while(i --){\n    hist[ src[i] ] ++;\n  }\n\n  i = 256;\n  while(i --){\n    sum += hist[i] * i;\n  }\n\n  i = 256;\n  while(i --){\n    wB += hist[i];\n    if (wB !== 0){\n    \n      wF = len - wB;\n      if (wF === 0){\n        break;\n      }\n\n      sumB += hist[i] * i;\n      \n      mu = (sumB / wB) - ( (sum - sumB) / wF );\n\n      between = wB * wF * mu * mu;\n      \n      if (between > max){\n        max = between;\n        threshold = i;\n      }\n    }\n  }\n\n  return threshold;\n};\n\nCV.gaussianBlur = function(imageSrc, imageDst, imageMean, kernelSize){\n  var kernel = CV.gaussianKernel(kernelSize);\n\n  imageDst.width = imageSrc.width;\n  imageDst.height = imageSrc.height;\n  \n  imageMean.width = imageSrc.width;\n  imageMean.height = imageSrc.height;\n\n  CV.gaussianBlurFilter(imageSrc, imageMean, kernel, true);\n  CV.gaussianBlurFilter(imageMean, imageDst, kernel, false);\n\n  return imageDst;\n};\n\nCV.gaussianBlurFilter = function(imageSrc, imageDst, kernel, horizontal){\n  var src = imageSrc.data, dst = imageDst.data,\n      height = imageSrc.height, width = imageSrc.width,\n      pos = (height * width) - 1, limit = kernel.length >> 1,\n      cur, value, i, j, k;\n      \n  i = height;\n  while(i --){\n    \n    j = width;\n    while(j --){\n      value = 0;\n    \n      for (k = -limit; k <= limit; ++ k){\n\n        if (horizontal){\n          cur = pos + k;\n          if (j + k < 0){\n            cur = pos;\n          }\n          else if (j + k >= width){\n            cur = pos;\n          }\n        }else{\n          cur = pos + (k * width);\n          if (i + k < 0){\n            cur = pos;\n          }\n          else if (i + k >= height){\n            cur = pos;\n          }\n        }\n\n        value += kernel[limit + k] * src[cur];\n      }\n    \n      dst[pos --] = horizontal? value: (value + 0.5) & 0xff;\n    }\n  }\n\n  return imageDst;\n};\n\nCV.gaussianKernel = function(kernelSize){\n  var tab =\n    [ [1],\n      [0.25, 0.5, 0.25],\n      [0.0625, 0.25, 0.375, 0.25, 0.0625],\n      [0.03125, 0.109375, 0.21875, 0.28125, 0.21875, 0.109375, 0.03125] ];\n\n  var kernel = [], center, sigma, scale2X, sum, x, i;\n\n  if ( (kernelSize <= 7) && (kernelSize % 2 === 1) ){\n    kernel = tab[kernelSize >> 1];\n  }else{\n    center = (kernelSize - 1) * 0.5;\n    sigma = 0.8 + (0.3 * (center - 1) );\n    scale2X = -0.5 / (sigma * sigma);\n    sum = 0;\n    for (i = 0; i !== kernelSize; ++ i){\n      x = i - center;\n      sum += kernel[i] = Math.exp(scale2X * x * x);\n    }\n    sum = 1 / sum;\n    for (i = 0; i < kernelSize; ++ i){\n      kernel[i] *= sum;\n    }  \n  }\n\n  return kernel;\n};\n\nCV.findContours = function(imageSrc){\n  var width = imageSrc.width, height = imageSrc.height, contours = [],\n      src, deltas, pos, pix, nbd, outer, hole, i, j;\n  \n  src = CV.binaryBorder(imageSrc);\n\n  deltas = CV.neighborhoodDeltas(width + 2);\n\n  pos = width + 3;\n  nbd = 1;\n\n  for (i = 0; i < height; ++ i, pos += 2){\n  \n    for (j = 0; j < width; ++ j, ++ pos){\n      pix = src[pos];\n\n      if (pix !== 0){\n        outer = hole = false;\n\n        if (pix === 1 && src[pos - 1] === 0){\n          outer = true;\n        }\n        else if (pix >= 1 && src[pos + 1] === 0){\n          hole = true;\n        }\n\n        if (outer || hole){\n          ++ nbd;\n          \n          contours.push( CV.borderFollowing(src, pos, nbd, {x: j, y: i}, hole, deltas) );\n        }\n      }\n    }\n  }  \n\n  return contours;\n};\n\nCV.borderFollowing = function(src, pos, nbd, point, hole, deltas){\n  var contour = [], pos1, pos3, pos4, s, s_end, s_prev;\n\n  contour.hole = hole;\n      \n  s = s_end = hole? 0: 4;\n  do{\n    s = (s - 1) & 7;\n    pos1 = pos + deltas[s];\n    if (src[pos1] !== 0){\n      break;\n    }\n  }while(s !== s_end);\n  \n  if (s === s_end){\n    src[pos] = -nbd;\n    contour.push( {x: point.x, y: point.y} );\n\n  }else{\n    pos3 = pos;\n    s_prev = s ^ 4;\n\n    while(true){\n      s_end = s;\n    \n      do{\n        pos4 = pos3 + deltas[++ s];\n      }while(src[pos4] === 0);\n      \n      s &= 7;\n      \n      if ( ( (s - 1) >>> 0) < (s_end >>> 0) ){\n        src[pos3] = -nbd;\n      }\n      else if (src[pos3] === 1){\n        src[pos3] = nbd;\n      }\n\n      contour.push( {x: point.x, y: point.y} );\n      \n      s_prev = s;\n\n      point.x += CV.neighborhood[s][0];\n      point.y += CV.neighborhood[s][1];\n\n      if ( (pos4 === pos) && (pos3 === pos1) ){\n        break;\n      }\n      \n      pos3 = pos4;\n      s = (s + 4) & 7;\n    }\n  }\n\n  return contour;\n};\n\nCV.neighborhood = \n  [ [1, 0], [1, -1], [0, -1], [-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1] ];\n\nCV.neighborhoodDeltas = function(width){\n  var deltas = [], i = CV.neighborhood.length;\n  \n  while(i --){\n    deltas[i] = CV.neighborhood[i][0] + (CV.neighborhood[i][1] * width);\n  }\n  \n  return deltas.concat(deltas);\n};\n\nCV.approxPolyDP = function(contour, epsilon){\n  var slice = {start_index: 0, end_index: 0},\n      right_slice = {start_index: 0, end_index: 0},\n      poly = [], stack = [], len = contour.length,\n      pt, start_pt, end_pt, dist, max_dist, le_eps,\n      dx, dy, i, j, k;\n  \n  epsilon *= epsilon;\n  \n  k = 0;\n  \n  for (i = 0; i !== 3; ++ i){\n    max_dist = 0;\n    \n    k = (k + right_slice.start_index) % len;\n    start_pt = contour[k];\n    if (++ k === len) {k = 0;}\n  \n    for (j = 1; j !== len; ++ j){\n      pt = contour[k];\n      if (++ k === len) {k = 0;}\n    \n      dx = pt.x - start_pt.x;\n      dy = pt.y - start_pt.y;\n      dist = dx * dx + dy * dy;\n\n      if (dist > max_dist){\n        max_dist = dist;\n        right_slice.start_index = j;\n      }\n    }\n  }\n\n  if (max_dist <= epsilon){\n    poly.push( {x: start_pt.x, y: start_pt.y} );\n\n  }else{\n    slice.start_index = k;\n    slice.end_index = (right_slice.start_index += slice.start_index);\n  \n    right_slice.start_index -= right_slice.start_index >= len? len: 0;\n    right_slice.end_index = slice.start_index;\n    if (right_slice.end_index < right_slice.start_index){\n      right_slice.end_index += len;\n    }\n    \n    stack.push( {start_index: right_slice.start_index, end_index: right_slice.end_index} );\n    stack.push( {start_index: slice.start_index, end_index: slice.end_index} );\n  }\n\n  while(stack.length !== 0){\n    slice = stack.pop();\n    \n    end_pt = contour[slice.end_index % len];\n    start_pt = contour[k = slice.start_index % len];\n    if (++ k === len) {k = 0;}\n    \n    if (slice.end_index <= slice.start_index + 1){\n      le_eps = true;\n    \n    }else{\n      max_dist = 0;\n\n      dx = end_pt.x - start_pt.x;\n      dy = end_pt.y - start_pt.y;\n      \n      for (i = slice.start_index + 1; i < slice.end_index; ++ i){\n        pt = contour[k];\n        if (++ k === len) {k = 0;}\n        \n        dist = Math.abs( (pt.y - start_pt.y) * dx - (pt.x - start_pt.x) * dy);\n\n        if (dist > max_dist){\n          max_dist = dist;\n          right_slice.start_index = i;\n        }\n      }\n      \n      le_eps = max_dist * max_dist <= epsilon * (dx * dx + dy * dy);\n    }\n    \n    if (le_eps){\n      poly.push( {x: start_pt.x, y: start_pt.y} );\n\n    }else{\n      right_slice.end_index = slice.end_index;\n      slice.end_index = right_slice.start_index;\n\n      stack.push( {start_index: right_slice.start_index, end_index: right_slice.end_index} );\n      stack.push( {start_index: slice.start_index, end_index: slice.end_index} );\n    }\n  }\n  \n  return poly;\n};\n\nCV.warp = function(imageSrc, imageDst, contour, warpSize){\n  var src = imageSrc.data, width = imageSrc.width,\n      dst = imageDst.data, square = [], pos = 0,\n      m, d, x, y, i, j;\n  \n  square[0] = {x: 0, y: 0};\n  square[1] = {x: warpSize - 1, y: 0};\n  square[2] = {x: warpSize - 1, y: warpSize - 1};\n  square[3] = {x: 0, y: warpSize - 1};\n\n  m = CV.getPerspectiveTransform(contour, square);\n\n  for (i = 0; i !== warpSize; ++ i){\n\n    for (j = 0; j !== warpSize; ++ j){\n\n      d = m[6] * j + m[7] * i + m[8];\n      x = ( m[0] * j + m[1] * i + m[2] ) / d;\n      y = ( m[3] * j + m[4] * i + m[5] ) / d;\n\n      dst[pos ++] = src[ (y + 0.5 >>> 0) * width + (x + 0.5 >>> 0) ];\n    }\n  }\n\n  imageDst.width = warpSize;\n  imageDst.height = warpSize;\n\n  return imageDst;\n};\n\nCV.getPerspectiveTransform = function(src, dst){\n  var du, dv, rq;\n\n  rq = CV.square2quad(src);\n  \n  du = dst[1].x - dst[0].x;\n  dv = dst[2].y - dst[0].y;\n  \n  rq[0] /= du;\n  rq[1] /= dv;\n  rq[2] -= rq[0] * dst[0].x + rq[1] * dst[0].y;\n  rq[3] /= du;\n  rq[4] /= dv;\n  rq[5] -= rq[3] * dst[0].x + rq[4] * dst[0].y;\n  rq[6] /= du;\n  rq[7] /= dv;\n  rq[8] -= rq[6] * dst[0].x + rq[7] * dst[0].y;\n  \n  return rq;\n};\n\nCV.square2quad = function(src){\n  var sq = [ [], [], [] ],\n      px, py, dx1, dx2, dy1, dy2, den;\n  \n  px = src[0].x - src[1].x + src[2].x - src[3].x;\n  py = src[0].y - src[1].y + src[2].y - src[3].y;\n  \n  if (0 === px && 0 === py){\n    sq[0] = src[1].x - src[0].x;\n    sq[1] = src[2].x - src[1].x;\n    sq[2] = src[0].x;\n    sq[3] = src[1].y - src[0].y;\n    sq[4] = src[2].y - src[1].y;\n    sq[5] = src[0].y;\n    sq[6] = 0;\n    sq[7] = 0;\n    sq[8] = 1;\n\n  }else{\n    dx1 = src[1].x - src[2].x;\n    dx2 = src[3].x - src[2].x;\n    dy1 = src[1].y - src[2].y;\n    dy2 = src[3].y - src[2].y;\n    den = dx1 * dy2 - dx2 * dy1;\n  \n    sq[6] = (px * dy2 - dx2 * py) / den;\n    sq[7] = (dx1 * py - px * dy1) / den;\n    sq[8] = 1;\n    sq[0] = src[1].x - src[0].x + sq[6] * src[1].x;\n    sq[1] = src[3].x - src[0].x + sq[7] * src[3].x;\n    sq[2] = src[0].x;\n    sq[3] = src[1].y - src[0].y + sq[6] * src[1].y;\n    sq[4] = src[3].y - src[0].y + sq[7] * src[3].y;\n    sq[5] = src[0].y;\n  }\n\n  return sq;\n};\n\nCV.isContourConvex = function(contour){\n  var orientation = 0, convex = true, len = contour.length,\n      cur_pt, prev_pt, dxdy0, dydx0, dx0, dy0, dx, dy, i, j;\n\n  prev_pt = contour[len - 1];\n  cur_pt = contour[0];\n\n  dx0 = cur_pt.x - prev_pt.x;\n  dy0 = cur_pt.y - prev_pt.y;\n\n  for (i = 0, j = 0; i !== len; ++ i){\n    if (++ j === len) {j = 0;}\n\n    prev_pt = cur_pt;\n    cur_pt = contour[j];\n\n    dx = cur_pt.x - prev_pt.x;\n    dy = cur_pt.y - prev_pt.y;\n    dxdy0 = dx * dy0;\n    dydx0 = dy * dx0;\n\n    orientation |= dydx0 > dxdy0? 1: (dydx0 < dxdy0? 2: 3);\n\n    if (orientation === 3){\n        convex = false;\n        break;\n    }\n\n    dx0 = dx;\n    dy0 = dy;\n  }\n\n  return convex;\n};\n\nCV.perimeter = function(poly){\n  var p = 0, dx, dy, i, j;\n\n  for (i = 0, j = 0; i !== poly.length; ++ i){\n    if (++ j === poly.length) {j = 0;}\n    \n    dx = poly[i].x - poly[j].x;\n    dy = poly[i].y - poly[j].y;\n    \n    p += Math.sqrt(dx * dx + dy * dy) ;\n  }\n\n  return p;\n};\n\nCV.minEdgeLength = function(poly){\n  var len = Infinity, d, dx, dy, i, j;\n\n  for (i = 0, j = 0; i !== poly.length; ++ i){\n    if (++ j === poly.length) {j = 0;}\n    \n    dx = poly[i].x - poly[j].x;\n    dy = poly[i].y - poly[j].y;\n\n    d = dx * dx + dy * dy;\n\n    if (d < len){\n      len = d;\n    }\n  }\n  \n  return Math.sqrt(len);\n};\n\nCV.countNonZero = function(imageSrc, square){\n  var src = imageSrc.data, nz = 0, pos, i, j;\n\n  pos = square.x + (square.y * imageSrc.width);\n  \n  for (i = 0; i !== square.height; ++ i){\n\n    for (j = 0; j !== square.width; ++ j){\n    \n      if ( src[pos ++] !== 0 ){\n        ++ nz;\n      }\n    }\n    \n    pos += imageSrc.width - square.width;\n  }\n\n  return nz;\n};\n\nCV.binaryBorder = function(imageSrc){\n  var src = imageSrc.data, width = imageSrc.width, height = imageSrc.height,\n      dst = [], posSrc = 0, posDst = 0, i, j;\n\n  j = width + 2;\n  while(j --){\n    dst[posDst ++] = 0;\n  }\n\n  i = height;\n  while(i --){\n    dst[posDst ++] = 0;\n    j = width;\n    while(j --){\n      dst[posDst ++] = src[posSrc ++]? 1: 0;\n    }\n    dst[posDst ++] = 0;\n  }\n\n  j = width + 2;\n  while(j --){\n    dst[posDst ++] = 0;\n  }\n  \n  return dst;\n};\n"},"html":{"language":"html","content":""},"css":{"language":"css","content":""},"published":"2012-02-03T14:23:43"}