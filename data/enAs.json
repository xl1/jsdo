{"name":"enAs","title":"MicroMML (Web Audio API)","description":"Chrome &#x306E; about:flags &#x3067; Web Audio API &#x6709;&#x52B9;&#x306B;&#x3059;&#x308B;&#x3068;&#x4F7F;&#x3048;&#x307E;&#x3059;&#x3002;<br>\n(Windows &#x7248; 14.0.814.0 dev &#x4EE5;&#x4E0A;&#x3067;&#x306F;&#x3001;&#x305F;&#x3076;&#x3093;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x6709;&#x52B9;&#xFF09;<br>\n<br>\n&#x3042;&#x307E;&#x308A;&#x3044;&#x308D;&#x3044;&#x308D;&#x306A;&#x3053;&#x3068;&#x306F;&#x3067;&#x304D;&#x307E;&#x305B;&#x3093;&#x3002;<br>\n<br>\n&#x95A2;&#x9023;<br>\n<a href=\"http://jsdo.it/xl1/lE5e\">http://jsdo.it/xl1/lE5e</a><br>\n<br>\n&#x305D;&#x306E;&#x4ED6; Google &#x306E;&#x30C7;&#x30E2;<br>\n<a href=\"http://chromium.googlecode.com/svn/trunk/samples/audio/index.html\">http://chromium.googlecode.com/svn/trunk/samples/audio/index.html</a><br>\n<a href=\"http://chromium.googlecode.com/svn/trunk/samples/audio/samples.html\">http://chromium.googlecode.com/svn/trunk/samples/audio/samples.html</a><br>\n","libraries":[],"js":{"language":"js","content":"(function(){\n\nvar _AudioContext = window.AudioContext || window.webkitAudioContext;\nif(_AudioContext){\n  window.MicroMML = MicroMML;\n} else return;\n\nvar PI = Math.PI;\n\n/*\n0 sin\n1 upward saw\n2 downward saw\n3 triangle\n4 rectangle\n5 white noise\n6 noise\n*/\nvar soundFunc = [\n  Math.sin,\n  function(p){ return p/PI-1; },\n  function(p){ return 1-p/PI; },\n  function(p){ p *= 2/PI; return p<1 ? p : p<3 ? 2-p : p-4; },\n  function(p){ return p<PI ? 1 : -1; },\n  function(p){ return Math.random() * 2 - 1; },\n  (function(){\n    var pp = 1, c = 5, r = 0.05;\n    return function(p){\n      if(!p) c = 5;\n      if(!c--) r = p<0 ? -p : p;\n      return pp = (Math.random() < r ? -pp : pp);\n    };\n  })()\n];\nvar fadeFunc = [\n  function(j){ return j<0.8 ? 1 : (1-j)/(1-0.8); },\n  function(j){ return 1-j; },\n  function(j){ return 1; }\n];\n\nvar frequency = (function(){\n  var k0 = { c: -9, d: -7, e: -5, f: -4, g: -2, a: 0, b: 2 };\n  var k1 = { '+': 1, '#': 1, '': 0, '-': -1 };\n  return function(h, sign, oct){\n    return 13.75 * Math.pow(2, (k0[h] + k1[sign]) / 12 + (oct || 0));\n  };\n})();\n\nfunction MicroMML(source, ctx){\n  if(!ctx) ctx = new _AudioContext();\n  var node = null;\n  var compiled = false;\n  if(source) compile();\n  \n  this.set = _set;\n  this.toString = _toString;\n  this.play = _play;\n  this.stop = _stop;\n  this.getNode = _getNode;\n  \n  function compile(){\n    if(node) node.disconnect();\n  \n    var buffer = new Array();\n    var trackData = source.split(';');\n    var numTracks = trackData.length;\n    \n    for(var track = 0; track < numTracks; track++){\n      var cfg = {\n        pos: 0,\n        oct: 5,\n        sound: soundFunc[0],\n        fade: fadeFunc[0],\n        tempo: 120,\n        volume: 16,\n        sndLen: 4,\n        loopStart: [],\n        loop: [],\n        sampleRate: 22050\n      };\n      \n      var re = new RegExp(/([a-z<>\\[\\]()@])([-+#]?)(\\d*)/g);\n      var s;\n      while(s = re.exec(trackData[track])){\n        var val = s[3] |0;\n        var freq, len;\n        switch(s[1]){\n          case 'c': case 'd': case 'e': case 'f': case 'g': case 'a': case 'b':\n            freq = frequency(s[1], s[2], cfg.oct);\n            len = val || cfg.sndLen;\n            len = cfg.sampleRate/* sample/sec */\n                * 60/* sec/min */\n                * 4/* 四分音符/小節 */\n                / cfg.tempo/* 四分音符/min */\n                / len/* /小節 */;\n            for(var i = 0; i < len; i++){\n              var idx = cfg.pos + i |0;\n              var p = 2 * PI * (freq * i / cfg.sampleRate % 1);\n              if(buffer.length <= idx) buffer[idx] = 0;\n              buffer[idx] +=\n                cfg.volume / 16 * cfg.sound(p) * cfg.fade(i / len) / numTracks;\n            }\n            cfg.pos += len;\n            break;\n          case 'r':\n            len = val || cfg.sndLen;\n            cfg.pos += cfg.sampleRate * 60 * 4 / cfg.tempo / len;\n            break;\n          case '<': cfg.oct +=  val || 1; break;\n          case '>': cfg.oct -=  val || 1; break;\n          case '[':\n            cfg.loopStart.push(re.lastIndex);\n            cfg.loop.push(-1);\n            break;\n          case ']':\n            var loop = cfg.loop.pop();\n            if(loop === -1) loop = s[3] ? val : 2; // first appearance of ]\n            if(--loop === 0){\n              cfg.loopStart.pop();\n            } else {\n              cfg.loop.push(loop);\n              re.lastIndex = cfg.loopStart[cfg.loopStart.length - 1];\n            }\n            break;\n          case '(': cfg.volume += val || 1; break;\n          case ')': cfg.volume -= val || 1; break;\n          case 'l': if(val) cfg.sndLen = val; break;\n          case 't': if(val) cfg.tempo = val; break;\n          case 'v': cfg.volume = val; break;\n          case 'o': cfg.oct = val; break;\n          case '@': cfg.sound = soundFunc[val] || soundFunc[0]; break;\n          default: break;\n        }\n      }\n    }\n    \n    // set buffer\n    var channel = 1;\n    node = ctx.createBufferSource();\n    node.buffer = ctx.createBuffer(channel, buffer.length, cfg.sampleRate);\n    node.buffer.getChannelData(0).set(buffer);\n    compiled = true;\n  }\n  \n  function _set(newSource){ source = newSource; compile(); }\n  function _toString(){ return source; }\n  function _play(){\n    if(compiled){\n      node.connect(ctx.destination);\n      node.noteOn(0);\n    }\n  }\n  function _stop(){\n    node.disconnect();\n  }\n  function _getNode(){ return node; }\n}\n\n})();"},"html":{"language":"html","content":"<textarea id=\"t\">l8 @4 cdefedcrefgagferc4c4c4c4cdefedc;\nl8 @4 r1cdefedcrefgagferc4c4c4c4cdefedc;\nl8 @4 r1r1cdefedcrefgagferc4c4c4c4cdefedc;\n</textarea>\n<button onclick=\"new MicroMML(t.value).play()\"> play </button>"},"css":{"language":"css","content":"html, body { margin: 0; }\ntextarea {\n  box-sizing: border-box;\n  font: 14px monospace;\n  width: 100%;\n  height: 300px;\n}"},"published":"2011-07-13T00:06:53"}