{"name":"ozPv","title":"ノイズ","description":"*&#x3042;&#x3068;&#x3067;&#x4F7F;&#x3046;","libraries":["/xl1/eHqL"],"js":{"language":"js","content":"function $text(id){ return document.getElementById(id).textContent; }\n\nnew MicroGL()\n    .init(document.body)\n    .program($text('vshader'), $text('fshader'))\n    .bindVars({ position: [0,0, 0,1, 1,0, 1,1] })\n    .draw();"},"html":{"language":"html","content":"<script type=\"x-shader/x-vertex\" id=\"vshader\">\nattribute vec2 position;\nvoid main(){ gl_Position = vec4(2.0 * position - vec2(1.0), 0.0, 1.0); }\n</script>\n<script type=\"x-shader/x-fragment\" id=\"fshader\">\nprecision mediump float;\n\nfloat random(vec2 p){\n  return fract(sin(p.x + p.y * 1.3 + 0.1) * 12345.6789);\n}\nfloat noise(vec2 p, float scale){\n  const vec2 D = vec2(0.0, 1.0);\n  vec2 q = p / scale, i = floor(q), f = fract(q);\n  return mix(\n    mix(random(i), random(i + D.yx), smoothstep(0.0, 1.0, f.x)),\n    mix(random(i + D), random(i + D.yy), smoothstep(0.0, 1.0, f.x)),\n    smoothstep(0.0, 1.0, f.y)\n  );\n}\nvoid main(){\n  float result = 0.0, scale = 1.0;\n  vec2 p = gl_FragCoord.xy - vec2(0.5);\n  for(int i = 0; i <= 5; i++){\n    result += scale * noise(p, scale) / 64.0;\n    scale += scale;\n  }\n  gl_FragColor = vec4(vec3(result), 1.0);\n}\n</script>"},"css":{"language":"css","content":""},"published":"2013-06-07T22:26:55"}