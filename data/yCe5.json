{"name":"yCe5","title":"Particle 50000","description":"WebGL &#x3057;&#x305F;&#x306E;&#x306B; fork &#x5143;&#x3088;&#x308A;&#x9045;&#x304F;&#x306A;&#x3063;&#x3066;&#x3057;&#x307E;&#x3063;&#x305F;&#x2026;&#x2026;<br>\nChrome &#x3067;&#x78BA;&#x8A8D;","libraries":[],"js":{"language":"js","content":"// forked from os0x's \"Particle 100000\" http://jsdo.it/os0x/5RVT\n// forked from os0x's \"Particle 40000\" http://jsdo.it/os0x/ezL2\n// forked from os0x's \"Particle 10000\" http://jsdo.it/os0x/30Pg\n// forked from clockmaker's \"Particle 3000\" http://jsdo.it/clockmaker/particle\n\n/*\n* WebGL のれんしゅう\n* パーティクル数減ってしまったのは残念\n*/\n\n/*\n* Opera10.60 Betaならいける気がする 10まん\n*/\n\n/*\n* いろいろ弄ってみたけど、パフォーマンス自体はほとんど変わってない…\n* 単にFPS落として40000パーティクル\n* Opera10.60 Betaが最適\n*/\n\n/*\n* Canvas での擬似lock/unlockとか使って無理やり 10000 パーティクル\n* 参考: http://ss-o.net/game2d/tech.html#C12\n*/\n\n/**\n* みんな大好きパーティクル\n* (JavaSript, HTML5バージョン)\n*\n* @author clockmaker\n* @see http://clockmaker.jp/blog/\n*\n* wonderflのパーティクル祭りを参考\n* http://wonderfl.net/c/436W/\n*/\n\n// -----------------------------------------\n// 定数\n// -----------------------------------------\nvar MAX_NUM = 50000; // パーティクルの個数\nvar FPS = 20;\nvar FRAMERATE = FPS / 1000 >> 0; // フレームレート\n\n// -----------------------------------------\n// クラス定義\n// -----------------------------------------\n/**\n* パーティクル\n*/\n/*function Particle(x,y) {\n    this.x = x;\n    this.y = y;\n    this.vx = 0;\n    this.vy = 0;\n}*/\n\n// -----------------------------------------\n// 初期化\n// -----------------------------------------\n\n// 変数の初期化\nvar mouseX = 0;\nvar mouseY = 0;\n\n// キャンバスの初期化\nvar canvas = document.getElementById(\"world\");\nvar gl = canvas.getContext('experimental-webgl') || canvas.getContext('webgl');\nvar width = canvas.width;\nvar height = canvas.height;\n\ngl.clearColor(0, 0, 0, 1);\ngl.viewport(0, 0, width, height);\n\n// シェーダの初期化\nvar shaders = initShader();\n\n//var particles = [];\nvar particleArray = new Array(MAX_NUM * 4);\n// パーティクルの初期化\nfor(var i = MAX_NUM * 4 + 4; i -= 4;){\n  particleArray[i    ] = Math.random() * width;\n  particleArray[i + 1] = Math.random() * height;\n  particleArray[i + 2] = 0;\n  particleArray[i + 3] = 0;\n}\n// FPS の表示\nvar fps_view = document.getElementById('fps');\nvar Counter = 0, last = +new Date();\n\n// イベントハンドラの登録\ncanvas.onmousemove = mouseMoveHandler;\nsetInterval(enterFrameHandler, FRAMERATE);\n\n// -----------------------------------------\n// イベントハンドラ\n// -----------------------------------------\n\n/**\n* マウスが動いたとき\n*/\nfunction mouseMoveHandler(e) {\n  // var rect = e.target.getBoundingClientRect();\n  // マウス座標の更新(もっとスマートな方法ある？)\n  //  → スマートではないけどoffsetで\n  //mouseX = e.clientX - canvas.offsetLeft;\n  //mouseY = e.clientY - canvas.offsetTop;\n  //    → layer\n  mouseX = e.layerX;\n  mouseY = e.layerY;\n}\n\n/**\n* タイマー\n*/\nfunction enterFrameHandler() {\n  // 初期化\n  gl.clear(gl.COLOR_BUFFER_BIT);\n  gl.uniform1f(shaders.uWidth, width);\n  gl.uniform1f(shaders.uHeight, height);\n\n  var vpos = [];\n\n  var gravityX = mouseX;\n  var gravityY = mouseY;\n\n  for(var i = MAX_NUM * 4 + 4; i -= 4;){\n    var x  = particleArray[i    ], y  = particleArray[i + 1];\n    var vx = particleArray[i + 2], vy = particleArray[i + 3];\n\n    var diffX = gravityX - x;\n    var diffY = gravityY - y;\n    var acc = 50 / (diffX * diffX + diffY * diffY);\n\n    vx += acc * diffX;\n    vy += acc * diffY;\n    x += vx;\n    y += vy;\n\n    particleArray[i + 2] = 0.96 * vx;\n    particleArray[i + 3] = 0.96 * vy;\n    vpos[vpos.length] = particleArray[i] =\n      (x > width) ? 0 : (x < 0) ? width : x;\n    vpos[vpos.length] = particleArray[i + 1] =\n      (y > height) ? 0 : (y < 0) ? height: y;\n  }\n\n  // 描画\n  var buffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vpos), gl.STATIC_DRAW);\n  gl.vertexAttribPointer(shaders.aVPos, 2, gl.FLOAT, false, 0, 0);\n  // これで書ける\n  gl.drawArrays(gl.POINTS, 0, MAX_NUM);\n  gl.deleteBuffer(buffer); // だいじ\n\n  if (++Counter > FPS){\n    var now = +new Date();\n    var _f = 1000 / ((now - last) / Counter);\n    last = now;\n    Counter = 0;\n    fps_view.innerHTML = 'FPS '+_f.toFixed(2);\n  }\n}\n\nfunction initShader(){\n  var program = gl.createProgram();\n  gl.attachShader(program, getShader('fshader', gl.FRAGMENT_SHADER));\n  gl.attachShader(program, getShader('vshader', gl.VERTEX_SHADER));\n  gl.linkProgram(program);\n  gl.useProgram(program);\n\n  // uniform, attribute 変数を関連付け、有効化\n  var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n  for(var i = numUniforms; i--;){\n    var uname = gl.getActiveUniform(program, i).name;\n    program[uname] = gl.getUniformLocation(program, uname);\n  }\n  var numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n  for(var i = numAttribs; i--;){\n    var aname = gl.getActiveAttrib(program, i).name;\n    gl.enableVertexAttribArray(\n      program[aname] = gl.getAttribLocation(program, aname));\n  }\n  return program;\n}\nfunction getShader(id, type){\n  var shader = gl.createShader(type);\n  gl.shaderSource(shader, document.getElementById(id).innerText);\n  gl.compileShader(shader);\n\n  if(!gl.getShaderParameter(shader, gl.COMPILE_STATUS)){\n    return alert(gl.getShaderInfoLog(shader));\n  }\n  return shader;\n}"},"html":{"language":"html","content":"<script type=\"x-shader/x-fragment\" id=\"fshader\">\n#ifdef GL_ES\nprecision highp float;\n#endif\n\nvoid main(void) {\n  gl_FragColor = vec4(1.0, 1.0, 0.5, 1.0);\n}\n</script>\n<script type=\"x-shader/x-vertex\" id=\"vshader\">\nattribute vec4 aVPos;\nuniform float uWidth;\nuniform float uHeight;\n\nvoid main(void) {\n  gl_Position = vec4(aVPos.x / uWidth / 5.0 - 0.1,\n                     0.1 - aVPos.y / uHeight / 5.0,\n                     0.1,\n                     0.1);\n  gl_PointSize = 1.0;\n}\n</script>\n<canvas id='world' \n        width=\"465\" \n        height=\"465\">\n</canvas>\n<div id=\"fps\"></div>\n"},"css":{"language":"css","content":"body {\n  margin:0;\n  padding:0;\n  overflow:hidden;\n  background:#666;\n}\ncanvas{\n  background:#000;\n  position:absolute;\n  top:0;\n  left:0;\n}\n#fps{\n  background:black;\n  color:white;\n  padding:.5em;\n  display:inline-block;\n  font-size:80%;\n  width:5em;\n  text-align:center;\n  border-radius:5px;\n  position:absolute;\n  top:5px;\n  left:5px;\n}"},"published":"2011-04-15T00:12:21"}