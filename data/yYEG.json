{"name":"yYEG","title":"forked: microgl test","description":"<div class=\"markdown\"><p>MicroGL Library is here: <a href=\"http://jsdo.it/xl1/eHqL\">http://jsdo.it/xl1/eHqL</a> or <a href=\"http://xl1.github.io/microgl/microgl.js\">http://xl1.github.io/microgl/microgl.js</a></p>\n\n<p>GLSL shader programs are required (see HTML tab).</p>\n</div>","libraries":["/xl1/eHqL"],"js":{"language":"js","content":"// forked from peko's \"microgl test\" http://jsdo.it/peko/jt3q\nvar gl = new MicroGL(), startT = 0;\n\nfunction $text(id){\n  return document.getElementById(id).textContent;\n}\n\nfunction main(){\n  // append <canvas> element to <body>\n  gl.init(document.body, 256, 256);\n  // compile shaders and link the program\n  gl.program($text('vshader'), $text('fshader'));\n  // bind variables\n  gl.bindVars({\n    a_position: [0,0, 0,1, 1,0, 1,1],\n    // images will be loaded asynchronously\n    // use `gl.texture(img, tex, callback)` to listen img.onload\n    //u_sampler: 'test.jpg',\n    u_sampler: '../assets/hruW5.jpg',\n    // matrices are transposed in shaders\n    u_perspective: [\n      2, 0, 0, 0,\n      0, 2, 0, 0,\n      0, 0, 1005/995, 1,\n      0, 0, -1000/995, 0\n    ]\n  });\n  startT = Date.now();\n  update();\n}\n\nfunction update(){\n  var t = (Date.now() - startT) * 0.003;\n  // update model-view matrix\n  gl.bindVars({\n    u_modelView: [\n      Math.cos(t), 0, -Math.sin(t), 0,\n      0,           1,            0, 0,\n      Math.sin(t), 0,  Math.cos(t), 0,\n      0, -0.5, 3, 1\n    ]\n  });\n  // then draw!\n  gl.clear().draw();\n  \n  requestAnimationFrame(update);\n}\n\n// start\nmain();"},"html":{"language":"html","content":"<!-- shader programs -->\n<script type=\"x-shader/x-vertex\" id=\"vshader\">\nattribute vec2 a_position;\nuniform mat4 u_perspective;\nuniform mat4 u_modelView;\nvarying vec2 v_texCoord;\n\nvoid main(){\n  v_texCoord = a_position;\n  gl_Position = u_perspective * u_modelView * vec4(a_position, 0.0, 1.0);\n}\n</script>\n<script type=\"x-shader/x-fragment\" id=\"fshader\">\nprecision mediump float;\n\nuniform sampler2D u_sampler;\nvarying vec2 v_texCoord;\n\nvoid main(){\n  gl_FragColor = texture2D(u_sampler, v_texCoord);\n}\n</script>"},"css":{"language":"css","content":"* {\n  margin: 0;\n  padding: 0;\n  border: 0;\n}\n\nbody {\n  background: #fdd;\n  font: 30px sans-serif;\n}"},"published":"2013-06-18T18:43:31"}