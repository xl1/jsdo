{"name":"6269","title":"::region() pseudo element polyfill","description":"<div class=\"markdown\"><p><code>\nRegion(&apos;#region1&apos;).addRegionRule &apos;p&apos;, {\n  color: &apos;red&apos;\n  backgroundColor: &apos;green&apos;\n}\nRegion(&apos;#region2&apos;).addRegionRule &apos;h1&apos;, &apos;&apos;&apos;\n  margin-right: 100px;\n&apos;&apos;&apos;\n</code></p>\n\n<p>&#x306E;&#x3088;&#x3046;&#x306B;&#x4F7F;&#x3046;</p>\n</div>","libraries":[],"js":{"language":"coffeescript","content":"camelCaseToSnakeCase = (str) ->\n  str.replace(/[A-Z]/, (l) -> '-' + String.fromCharCode(l.charCodeAt(0) + 32))\n\nrandint = (max) ->\n  Math.random() * (max + 1) |0\n\ngetPrefixedProperty = (obj, prop, prefixes=['webkit', 'adobe', 'moz', 'ms']) ->\n  if obj[prop]?\n    return prop\n  else for prefix in prefixes\n    prefixedProp = prefix + prop[0].toUpperCase() + prop[1..]\n    if obj[prefixedProp]?\n      return prefixedProp\n  return\n\nprefixed = {}\nprefixedRegionfragmentchangeEventNames = [\n  'webkitregionlayoutupdate'\n  'adoberegionlayoutupdate'\n  'regionlayoutupdate'\n  'webkitregionfragmentchange'\n  'adoberegionfragmentchange'\n  'mozregionfragmentchange'\n  'msregionfragmentchange'\n  'regionfragmentchange'\n]\nsupportType =\n  if getPrefixedProperty(Element::, 'getComputedRegionStyle')?\n    'full'\n  else if getPrefixedProperty(document, 'getNamedFlows')?\n    'basic'\n  else if window.CSSRegions?\n    'polyfill'\n  else\n    console.warn 'CSS Regions is not supported.'\n    'none'\n\nwindow.addEventListener 'load', ->\n  prefixed =\n    getRegionFlowRanges:\n      getPrefixedProperty(Element::, 'getRegionFlowRanges')\n    matches:\n      getPrefixedProperty(Element::, 'matchesSelector') or\n      getPrefixedProperty(Element::, 'matches')\n    getNamedFlows:\n      getPrefixedProperty(document, 'getNamedFlows')\n, false\n\n\nclass RegionNode\n  insertCSS: do ->\n    sheet = document.head.appendChild(document.createElement 'style').sheet\n    (selector, style) ->\n      if typeof style isnt 'string'\n        style = (for p in Object.keys(style)\n          \"#{camelCaseToSnakeCase(p)}: #{style[p]};\"\n        ).join('\\n')\n      sheet.insertRule \"#{selector} {\\n#{style}}\", sheet.cssRules.length\n\n  constructor: (@regionSelector) ->\n    @rules = []\n    @stopped = {}\n    if supportType is 'basic'\n      if document.readyState is 'complete' # already loaded\n        @initialize()\n      else\n        window.addEventListener 'load', @initialize.bind(@), false\n\n  initialize: ->\n    for flow in document[prefixed.getNamedFlows]()\n      @update(flow)\n      handler = @update.bind(@, flow)\n      for eventName in prefixedRegionfragmentchangeEventNames\n        flow.addEventListener eventName, handler, false\n    @\n    \n  update: (flow) ->\n    return @ if @stopped[flow.name]\n    @stopped[flow.name] = true\n    @resetStyleInFlow(flow)\n    for rule in @rules\n      @applyStyleInFlow(flow, rule.selector, rule.className)\n    setTimeout =>\n      @stopped[flow.name] = false\n    , 50\n    @\n\n  addRegionRule: (selector, style) ->\n    ruleSelector = switch supportType\n      when 'full'\n        \"#{@regionSelector}::region(#{selector})\"\n      when 'basic'\n        className = '__INSERTED__' + randint(9999999)\n        @rules.push { selector, className }\n        '.' + className\n      when 'polyfill'\n        \"#{@regionSelector} #{selector}\"\n    @insertCSS(ruleSelector, style)\n    @\n\n  applyStyleInFlow: (flow, contentSelector, className) ->\n    regions = []\n    for r in flow.getRegions()\n      if r[prefixed.matches](@regionSelector)\n        regions.push(r)\n      regions.push(r.querySelectorAll(@regionSelector)...)\n    if regions.length is 0\n      return\n    for content in flow.getContent()\n      for elem in content.querySelectorAll(contentSelector)\n        for region in regions\n          @applyStyleInRegion(region, elem, className)\n    @\n\n  getRange: (region, idx) ->\n    region[prefixed.getRegionFlowRanges]()[idx]\n\n  applyStyleInRegion: (region, elem, className) ->\n    # region: Region\n    # elem: Element, contentQuery にマッチした elem\n    # range: Range, region の range のうち今対象にしているもの\n    # targetRange: Range, 操作したい部分\n    # frag: Element, elem の一部\n    i = 0\n    while true\n      range = @getRange(region, i)\n      break unless range\n\n      comp = @compare(range, elem)\n      if comp.etos >= 0 #(1)\n        break\n      if comp.stoe <= 0 #(2)\n        i++\n        continue # next range\n      # apply style\n      targetRange = range.cloneRange()\n      if comp.stos < 0\n        targetRange.setStartBefore(elem)\n      targetRange.setEndAfter(elem)\n      frag = targetRange.extractContents().firstChild\n      frag.classList.add(className)\n      targetRange.insertNode(frag)\n      \n      # reset if overset\n      range = @getRange(region, i)\n      comp = @compare(range, elem)\n      console.assert comp.stos <= 0\n      console.assert comp.stoe >= 0\n      if comp.etoe < 0\n        targetRange = document.createRange()\n        targetRange.setStart(range.endContainer, range.endOffset)\n        targetRange.setEndAfter(frag)\n        frag = targetRange.extractContents().lastChild\n        console.assert frag.classList.contains className\n        frag.classList.remove className\n        targetRange.insertNode(frag)\n      i++\n    @\n\n  compare: (range, elem) ->\n    target = document.createRange()\n    target.selectNode(elem)\n    stoe = range.compareBoundaryPoints(range.START_TO_END, target)\n    stos = range.compareBoundaryPoints(range.START_TO_START, target)\n    etoe = range.compareBoundaryPoints(range.END_TO_END, target)\n    etos = range.compareBoundaryPoints(range.END_TO_START, target)\n    target.detach()\n    { stoe, stos, etoe, etos }\n\n  resetStyleInFlow: (flow) ->\n    for content in flow.getContent()\n      for elem in content.querySelectorAll('[class^=\"__INSERTED__\"]')\n        elem.className = elem.className.replace(/__INSERTED__\\d+/g, '')\n    @\n\n\nwindow.Region = (s) -> new RegionNode(s)\n"},"html":{"language":"html","content":""},"css":{"language":"css","content":""},"published":"2013-12-18T00:05:37"}