{"name":"aHp2","title":"dithering algorithms","description":"<div class=\"markdown\"><p>ref: <a href=\"http://bisqwit.iki.fi/story/howto/dither/jy/\">Arbitrary-palette positional dithering algorithm</a></p>\n</div>","libraries":["/xl1/eHqL"],"js":{"language":"coffeescript","content":"vshader = '''\n  attribute vec2 a_position;\n  varying vec2 v_texCoord;\n\n  void main(){\n    v_texCoord = a_position / 2.0 + vec2(0.5);\n    gl_Position = vec4(a_position, 0.0, 1.0);\n  }\n'''\n\nfshaderBase = '''\n  precision mediump float;\n  uniform sampler2D u_source;\n  uniform sampler2D u_colors;\n  varying vec2 v_texCoord;\n\n  const float GAMMA = 2.2;\n\n  vec4 gamma(vec4 color){\n    return pow(color, vec4(GAMMA));\n  }\n  vec4 ungamma(vec4 color){\n    return pow(color, vec4(1.0 / GAMMA));\n  }\n  int ditherIdx(){\n    float p = floor(mod(gl_FragCoord.x, 4.0));\n    float q = floor(mod(p - gl_FragCoord.y, 4.0));\n    return int(\n      8.0 * mod(q, 2.0) +\n      4.0 * mod(p, 2.0) +\n      2.0 * floor(q / 2.0) +\n      floor(p / 2.0)\n    );\n  }\n'''\n\nfshader =\n  tone: fshaderBase + '''\n    const int COMBINATIONS = 64;\n    \n    void getColors(in int idx, out vec4 c1, out vec4 c2){\n      float x = (0.5 + float(idx)) / float(COMBINATIONS);\n      c1 = gamma(texture2D(u_colors, vec2(x, 0.0)));\n      c2 = gamma(texture2D(u_colors, vec2(x, 2.0)));\n    }\n    float ditherIndex(){\n      return (0.5 + float(ditherIdx())) / 16.0;\n    }\n    float calculateBestRatio(vec4 srcColor, vec4 c1, vec4 c2){\n      vec4 dif = c2 - c1;\n      return floor(\n        0.5 + dot(dif, srcColor - c1) / dot(dif, dif) * 16.0\n      ) / 16.0;\n    }\n    vec4 dither(vec4 srcColor){\n      vec4 c1, c2, canditate;\n      float ratio;\n      float d, minDist = 9.9;\n      float index = ditherIndex();\n      \n      for(int i = 0; i < COMBINATIONS; i++){\n        getColors(i, c1, c2);\n        ratio = calculateBestRatio(srcColor, c1, c2);\n        d = distance(srcColor, mix(c1, c2, clamp(ratio, 0.0, 1.0)));\n        if(minDist > d){\n          minDist = d;\n          if(index > ratio){\n            canditate = c1;\n          } else {\n            canditate = c2;\n          }\n        }\n      }\n      return canditate;\n    }\n    void main(){\n      vec4 srcColor = gamma(texture2D(u_source, v_texCoord));\n      gl_FragColor = ungamma(dither(srcColor));\n    }\n  '''\n\n  nterm: fshaderBase + '''\n    const int LOOPMAX = 16;\n    const int COLORLEN = 16;\n\n    vec4 getColor(int idx){\n      float x = (0.5 + float(idx)) / float(COLORLEN);\n      return gamma(texture2D(u_colors, vec2(x, 0.5)));\n    }\n    vec4 dither(vec4 srcColor){\n      vec4 sum = vec4(0.0);\n      int total = 0, di = ditherIdx();\n      \n      float d, mind;\n      vec4 color, next;\n      int nextp;\n\n      for(int i = 0; i < LOOPMAX; i++){\n        mind = 9.9;\n        for(int j = 0; j < COLORLEN; j++){\n          color = getColor(j);\n          for(int p = 1; p < LOOPMAX; p++){\n            d = distance(srcColor,\n              mix(sum, color, float(p) / float(total + p))\n            );\n            if(mind > d){\n              mind = d;\n              next = color;\n              nextp = p;\n            }\n          }\n        }\n        sum = mix(sum, next, float(nextp) / float(total + nextp));\n        total += nextp;\n        if(total > di) return next;\n      }\n      return vec4(0.0);\n    }\n    void main(){\n      vec4 srcColor = gamma(texture2D(u_source, v_texCoord));\n      gl_FragColor = ungamma(dither(srcColor));\n    }\n  '''\n\n  tknoll: fshaderBase + '''\n    const int COLORLEN = 16;\n    const float COEF = 0.2;\n    \n    vec4 getColor(int idx){\n      float x = (0.5 + float(idx)) / float(COLORLEN);\n      return gamma(texture2D(u_colors, vec2(x, 0.5)));\n    }\n    vec4 nearest(vec4 srcColor){\n      vec4 col, minCol;\n      float d, mind = 9.9;\n      \n      for(int i = 0; i < COLORLEN; i++){\n        col = getColor(i);\n        d = distance(srcColor, col);\n        if(mind > d){\n          minCol = col;\n          mind = d;\n        }\n      }\n      return minCol;\n    }\n    vec4 dither(vec4 srcColor){\n      int index = ditherIdx();\n      vec4 nearCol, color = srcColor, err = vec4(0.0);\n      for(int i = 0; i < 16; i++){\n        nearCol = nearest(srcColor + COEF * err);\n        if(i == index) return nearCol;\n        err += srcColor - nearCol;\n      }\n      return vec4(0.0);\n    }\n    void main(){\n      vec4 srcColor = gamma(texture2D(u_source, v_texCoord));\n      gl_FragColor = ungamma(dither(srcColor));\n    }\n  '''\n\n  nodither: fshaderBase + '''\n    const int COLORLEN = 16;\n    \n    vec4 getColor(int idx){\n      float x = (0.5 + float(idx)) / float(COLORLEN);\n      return gamma(texture2D(u_colors, vec2(x, 0.5)));\n    }\n    vec4 nearest(vec4 srcColor){\n      vec4 col, minCol;\n      float d, mind = 9.9;\n      \n      for(int i = 0; i < COLORLEN; i++){\n        col = getColor(i);\n        d = distance(srcColor, col);\n        if(mind > d){\n          minCol = col;\n          mind = d;\n        }\n      }\n      return minCol;\n    }\n    void main(){\n      vec4 srcColor = gamma(texture2D(u_source, v_texCoord));\n      gl_FragColor = ungamma(nearest(srcColor));\n    }\n  '''\n\ncombinations = (ary, len) ->\n  return [[]] unless len\n  res = []\n  for a, i in ary\n    for last in combinations ary.slice(i + 1), len - 1\n      res.push [a].concat(last)\n  res\n\nclass Color\n  constructor: (@r=0, @g=0, @b=0) ->\n  dist: (color) ->\n    [dr, dg, db] = [color.r - @r, color.g - @g, color.b - @b]\n    Math.sqrt(dr * dr + dg * dg + db * db)\n  luma: -> @r * 0.3 + @g * 0.59 + @b * 0.11\n  toArray: -> [@r, @g, @b]\n  toString: -> \"rgb(#{@r}, #{@g}, #{@b})\"\n\n# create imagedata from array of (array of colors)\nmakeCanvas = (width, height, ary) ->\n  ctx = document.createElement('canvas').getContext '2d'\n  ctx.canvas.width  = width\n  ctx.canvas.height = height\n  idata = ctx.createImageData(width, height)\n  for inner, x in ary\n    if 'length' not of inner\n      inner = [inner]\n    for color, y in inner\n      idata.data.set([\n        color.r, color.g, color.b, 255\n      ], (x + y * width) << 2)\n  ctx.putImageData(idata, 0, 0)\n  ctx.canvas\n\ncolors = [\n  new Color( 30,  30,  30)\n  new Color(250, 250, 250)\n  new Color(200,   0,   0)\n  new Color(250, 200,   0)\n  new Color(  0, 100,  50)\n  new Color(  0,  50, 200)\n  new Color( 30, 200,  30)\n  new Color(250, 150, 250)\n]\n\ndefaultCanvas = makeCanvas(16, 1, colors)\ncanvas =\n  tone: makeCanvas 64, 2, combinations(\n    colors.sort((a, b) -> a.luma() - b.luma()), 2\n  ).sort(\n    ([a1, a2], [b1, b2]) -> a1.dist(a2) - b1.dist(b2)\n  ).slice(0, 64)\n\nmain = ->\n  gl = new MicroGL(antialias: false)\n  tex = gl.texture document.getElementById('source')\n  gl.init(null, 256, 256)\n    .texParameter(tex, filter: 'NEAREST')\n  for canv in document.querySelectorAll 'canvas'\n    name = canv.id\n    gl.program(vshader, fshader[name])\n      .bindVars(\n        a_position: [-1, -1, -1, 1, 1, -1, 1, 1] \n        u_source: tex\n        u_colors: canvas[name] or defaultCanvas\n      )\n      .draw()\n    canv.getContext('2d').drawImage(gl.gl.canvas, 0, 0)\n\nwindow.addEventListener 'load', main, false"},"html":{"language":"html","content":"<img src=\"../assets/cgPXX.jpg\" id=\"source\">\n<canvas width=\"256\" height=\"256\" id=\"nodither\"></canvas>\n<canvas width=\"256\" height=\"256\" id=\"tone\"></canvas>\n<canvas width=\"256\" height=\"256\" id=\"nterm\"></canvas>\n<canvas width=\"256\" height=\"256\" id=\"tknoll\"></canvas>"},"css":{"language":"css","content":""},"published":"2013-03-25T01:10:58"}