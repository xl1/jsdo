{"name":"lE5e","title":"Web Audio API test","description":"Chrome &#x306E; Windows &#x7248; dev &#x4EE5;&#x4E0A;&#x3001;Linux &#x7248; dev &#x4EE5;&#x4E0A;&#x3001;&#x307E;&#x305F;&#x306F; Mac &#x7248;&#x306B;&#x304A;&#x3044;&#x3066;&#x3001;about:flags &#x3067;&#x300C;&#x30A6;&#x30A7;&#x30D6; &#x30AA;&#x30FC;&#x30C7;&#x30A3;&#x30AA;&#x300D;&#x3092;&#x6709;&#x52B9;&#x306B;&#x3059;&#x308B;&#x3068;&#x4F7F;&#x3048;&#x308B;&#x3002;<br>\n&#x3053;&#x3053;&#x306B;&#x30C7;&#x30E2;&#x304C;&#x305F;&#x304F;&#x3055;&#x3093;&#x3042;&#x3063;&#x305F;&#x3002;<br>\n<a href=\"http://chromium.googlecode.com/svn/trunk/samples/audio/index.html\">http://chromium.googlecode.com/svn/trunk/samples/audio/index.html</a><br>\n<br>\n<br>\n&#x203B; 2011/09/11 &#x8FFD;&#x8A18;<br>\n&#x30D5;&#x30EA;&#x30FC;&#x30BA;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x304C;&#x3001;&#x539F;&#x56E0;&#x306F;&#x307E;&#x3060;&#x308F;&#x304B;&#x308A;&#x307E;&#x305B;&#x3093;","libraries":[],"js":{"language":"js","content":"var cfg = {\n  edge : 0.5,\n  sampleRate: 44100,\n  bufferSize: 4096\n};\nvar ctx = new (window.AudioContext || window.webkitAudioContext)();\nctx.sampleRate = cfg.sampleRate;\nctx.phase = 0;\n\nvar tones = {\n  o    : new Tone(ctx, function(){ return 0; }),\n  sine : new Tone(ctx, function(p){ return Math.sin(2*Math.PI*p); }),\n  tri  : new Tone(ctx, function(p){\n    return p < 0.25 ? 4*p : p < 0.75 ? 2-4*p : 4*p-4;\n  }),\n  saw  : new Tone(ctx, function(p){ return 2*p-1; }),\n  rect : new Tone(ctx, function(p){ return p < 0.5 ? 1 : -1; }),\n  noise: new Tone(ctx, function(){ return Math.random() * 2 - 1; })\n};\n\nvar sound;\nvar updateSound = (function(){\n  var tone = tones.sine.synth(tones.sine.double()).x(2);\n  var freq = 440;\n  return function(x){\n    if(typeof x === 'number'){\n      freq = x;\n    } else if(x instanceof Tone){\n      tone = x;\n    }\n    sound = tone.generate(freq);\n  };\n})();\n\n// add events\n$('trigger').addEventListener('input', function(){\n  cfg.edge = this.value -0;\n}, false);\n$('freq').addEventListener('input', function(){\n  updateSound(this.value -0);\n}, false);\nArray.prototype.forEach.call($('soundButtons').querySelectorAll('button'),\n    function(e){\n  e.addEventListener('click', function(){\n    updateSound(tones[e.innerText]);\n  }, false);\n});\n$('applyButton').addEventListener('click', function(){\n  var t;\n  try{ t = eval($('txt').value); } catch(e) {}\n  if(t instanceof Tone) updateSound(t);\n}, false);\n\nupdateSound();\n\n\n// create node\nvar node = ctx.createJavaScriptNode(cfg.bufferSize, 0, 1);\n\nnode.onaudioprocess = (function(cnv){\n  var width = cnv.canvas.width;\n  var height = cnv.canvas.height;\n  cnv.strokeStyle = '#000';\n  \n  return function(e){\n    var data = e.outputBuffer.getChannelData(0);\n    cnv.clearRect(0, 0, width, height);\n    var drawing = false;\n    cnv.beginPath();\n    for(var i = 0, j = 0; i < data.length; i++){\n      var snd = sound();\n      snd = snd > 1 ? 1 : snd < -1 ? -1 : snd;\n      data[i] = snd;\n      if(data[i-1] < cfg.edge && cfg.edge <= snd) drawing = true; // trigger\n      if(drawing && j < width){\n        var y = height * (1 - snd) * .5;\n        j ? cnv.lineTo(j, y) : cnv.moveTo(j, y);\n        j++;\n      }\n    }\n    cnv.stroke();\n  };\n})(document.getElementsByTagName('canvas')[0].getContext('2d'));\n\nnode.connect(ctx.destination);\n\n// --- --- ---\n\nfunction $(i){ return document.getElementById(i); }\n\nfunction Tone(ctx, baseFunc){\n  var my = this;\n  this.func = baseFunc;\n  this.generate = _generate;\n  this.synth = _synth;\n  this.x = _x;\n  this.double = _double;\n  function _generate(freq, amp){\n    if(!freq) freq = 440;\n    if(typeof amp === 'undefined') amp = 1;\n    return function(){\n      ctx.phase = (ctx.phase + freq / ctx.sampleRate) % 1;\n      return amp * my.func(ctx.phase);\n    };\n  }\n  function _synth(tone){\n    return new Tone(ctx, function(p){\n      return (my.func(p) + tone.func(p)) * .5;\n    });\n  }\n  function _x(v){\n    return new Tone(ctx, function(p){\n      return v * my.func(p);\n    });\n  }\n  function _double(v){\n    if(typeof v === 'undefined') v = 2;\n    return new Tone(ctx, function(p){\n      return my.func(v * p % 1);\n    });\n  }\n}"},"html":{"language":"html","content":"<canvas width=\"800\" height=\"200\"></canvas>\n<div>\n  <div>\n    trigger: <input type=\"range\" id=\"trigger\" value=\"0.5\" min=\"-1\" max=\"1\" step=\"any\">\n  </div>\n  <div>\n    frequency: <input type=\"range\" id=\"freq\" value=\"440\" min=\"1\" max=\"3000\">\n  </div>\n  <div id=\"soundButtons\">\n    <button>o</button>\n    <button>sine</button>\n    <button>tri</button>\n    <button>saw</button>\n    <button>rect</button>\n    <button>noise</button>\n  </div>\n  <div>\n    <textarea rows=\"3\" id=\"txt\">tones.sine.synth(tones.sine.double()).x(2);</textarea><br>\n    <button id=\"applyButton\">apply</button>\n  </div>\n</div>"},"css":{"language":"css","content":"canvas   { border: 1px solid black; }\ninput    { width: 500px; }\nbutton   { width: 100px; }\ntextarea { width: 800px; font-size: large; }"},"published":"2011-05-14T09:22:25"}