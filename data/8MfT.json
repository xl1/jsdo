{"name":"8MfT","title":"影をつける","description":"<div class=\"markdown\"><ul>\n<li><code>depthMap.color</code> &#x30C6;&#x30AF;&#x30B9;&#x30C1;&#x30E3;&#x306E;&#x89E3;&#x50CF;&#x5EA6;&#x304C;&#x7C97;&#x3044;&#x306E;&#x3067;&#x5F71;&#x3082;&#x7C97;&#x3044;&#x306E;&#x3060;&#x3051;&#x308C;&#x3069;&#x3001;canvas &#x3092;&#x5927;&#x304D;&#x304F;&#x3059;&#x308B;&#x4EE5;&#x5916;&#x306B;&#x56DE;&#x907F;&#x65B9;&#x6CD5;&#x306F;&#x3042;&#x308B;&#x306E;&#x304B;&#x6559;&#x3048;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;</li>\n<li>&#x30E2;&#x30C7;&#x30EB;&#x306E; JSON &#x306F;<a href=\"./assets/kvyI0\">&#x3053;&#x308C;</a>&#x3067;&#x3001;<a href=\"https://www.khronos.org/registry/webgl/sdk/demos/webkit/resources/teapot.obj\">https://www.khronos.org/registry/webgl/sdk/demos/webkit/resources/teapot.obj</a> &#x304B;&#x3089;&#x5909;&#x63DB;&#x3057;&#x307E;&#x3057;&#x305F;</li>\n</ul>\n\n<h3>2013/6/7 &#x66F4;&#x65B0;</h3>\n\n<ul>\n<li>&#x3059;&#x3053;&#x3057;&#x5F71;&#x3092;&#x7D30;&#x304B;&#x304F;&#x3057;&#x305F;&#x3051;&#x3069;&#x307E;&#x3060;&#x3060;&#x3081;&#x3001;&#x5883;&#x754C;&#x304C;&#x3050;&#x3061;&#x3083;&#x3050;&#x3061;&#x3083;</li>\n<li>GitHub Pages &#x304C;&#x843D;&#x3061;&#x305F;&#x306E;&#x3067;&#x30E9;&#x30A4;&#x30D6;&#x30E9;&#x30EA;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x306B;&#x3057;&#x305F;&#x2026;&#x2026;</li>\n</ul>\n\n<h3>2013/7/24 &#x66F4;&#x65B0;</h3>\n\n<ul>\n<li>uniform lightView &#x3092;&#x9802;&#x70B9;&#x30B7;&#x30A7;&#x30FC;&#x30C0;&#x3067;&#x3082;&#x30D5;&#x30E9;&#x30B0;&#x30E1;&#x30F3;&#x30C8;&#x30B7;&#x30A7;&#x30FC;&#x30C0;&#x3067;&#x3082;&#x4F7F;&#x3063;&#x3066;&#x3044;&#x305F;&#x304C;&#x3001;&#x7CBE;&#x5EA6;&#x3092;&#x63C3;&#x3048;&#x306A;&#x3044;&#x3068;&#x63CF;&#x753B;&#x3055;&#x308C;&#x306A;&#x304F;&#x306A;&#x3063;&#x3066;&#x3044;&#x305F;&#xFF08;Chrome 30.0.1573.2 dev&#xFF09;&#x305F;&#x3081;&#x7CBE;&#x5EA6;&#x3092;&#x63C3;&#x3048;&#x305F;</li>\n</ul>\n</div>","libraries":["/xl1/eHqL"],"js":{"language":"coffeescript","content":"# shaders\nvshader = \n  main: '''\n    precision mediump float;\n    attribute vec3 position;\n    attribute vec3 normal;\n    uniform mat4 modelView;\n    uniform mat4 perspective;\n    uniform mat4 parallel;\n    uniform mat3 lightView;\n    varying vec3 normalTransformed;\n    varying vec3 lightCoord;\n\n    void main(){\n      mat3 modelView3 = mat3(modelView);\n      gl_Position = perspective * modelView * vec4(position, 1.0);\n      lightCoord = (parallel * vec4(lightView * modelView3 * position, 1.0)).xyz;\n      normalTransformed = modelView3 * normal;\n    }\n  '''\n  depth: '''\n    precision mediump float;\n    attribute vec3 position;\n    uniform mat4 modelView;\n    uniform mat4 parallel;\n    uniform mat3 lightView;\n    void main(){\n      gl_Position = parallel * vec4(lightView * mat3(modelView) * position, 1.0);\n    }\n  '''\n\nfshader =\n  main: '''\n    precision mediump float;\n    uniform sampler2D depthMap;\n    uniform mat3 lightView;\n    varying vec3 lightCoord;\n    varying vec3 normalTransformed;\n\n    const vec3 color = vec3(1.0, 1.0, 0.0);\n    const vec3 envLight = vec3(0.1);\n    const vec4 bias = vec4(1.0, 256.0, 65536.0, 16777216.0);\n\n    void main(){\n      vec3 light = vec3(lightView[0].z, lightView[1].z, lightView[2].z);\n      vec3 ref = 0.5 * lightCoord + vec3(0.5);\n      vec4 depthVec = texture2D(depthMap, ref.xy);\n      float depth = dot(depthVec, 1.0 / bias);\n      float diffuse = ref.z - depth < 0.01\n        ? max(0.0, dot(-light, normalize(normalTransformed)))\n        : 0.0;\n      gl_FragColor = vec4(envLight + diffuse * color, 1.0);\n    }\n  '''\n  wireframe: '''\n    precision mediump float;\n    void main(){ gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0); }\n  '''\n  depth: '''\n    precision mediump float;\n    const vec4 bias = vec4(1.0, 256.0, 65536.0, 16777216.0);\n    void main(){\n      vec4 depthVec = fract(gl_FragCoord.z * bias);\n      depthVec -= vec4(depthVec.yzw / 256.0, 0.0);\n      gl_FragColor = depthVec;\n    }\n  '''\n\n# utility functions\nxhrget = (url, callback) ->\n  xhr = new XMLHttpRequest\n  xhr.open('GET', url, true)\n  xhr.onload = -> callback(xhr.responseText)\n  xhr.send(null)\n\ndirectionMatrix = (x, y, z) ->\n  len = Math.sqrt(x * x + y * y + z * z)\n  [x, y, z] = [x / len, y / len, z / len]\n  if y is 1 or y is -1\n    [\n      0, y, 0\n      0, 0, y\n      1, 0, 0\n    ]\n  else\n    t = Math.sqrt(1 - y * y)\n    [\n      z/t, -x*y/t, x\n      0, t, y\n      -x/t, -y*z/t, z\n    ]\n\n# global variables\ngl = new MicroGL()\nprogram = {}\ndepthMap = null\nconstant = null\n\n# matrices\nparallel = [\n  0.05, 0, 0, 0\n  0, 0.05, 0, 0\n  0, 0, 0.025, 0\n  0, 0, -0.5, 1\n]\nperspective = [\n  2, 0, 0, 0\n  0, 2, 0, 0\n  0, 0, 1.01, 1\n  0, 0, -1.01, 0\n]\nmodelView = [\n  1, 0, 0, 0\n  0, 1, 0, 0\n  0, 0, 1, 0\n  0, 0,30, 1\n]\n\nmain = (json) ->\n  teapot = JSON.parse(json).Teapot01\n\n  gl.init(document.body, 512, 512)\n  program.depth = gl.makeProgram vshader.depth, fshader.depth\n  program.main = gl.makeProgram vshader.main, fshader.main\n  program.wireframe = gl.makeProgram vshader.main, fshader.wireframe\n  constant = gl.program(program.main).variable(\n    position: teapot.position\n    normal: teapot.normal\n    INDEX: teapot.INDEX\n    perspective: perspective\n    parallel: parallel\n    lightView: directionMatrix(1, -1, 1)\n  )\n  depthMap = gl.frame()\n\n  gl.gl.canvas.addEventListener 'mousemove', (e) ->\n    x = e.offsetX / @offsetWidth - 0.5\n    y = 0.5 - e.offsetY / @offsetHeight\n    rotate = directionMatrix(x * 3, y * 3, 1)\n    modelView = [\n      rotate[0], rotate[1], rotate[2], 0\n      rotate[3], rotate[4], rotate[5], 0\n      rotate[6], rotate[7], rotate[8], 0\n      0, 0, 30, 1\n    ]\n  , false\n\n  update()\n\n\nupdate = ->\n  # prepare depth map\n  gl.program(program.depth)\n    .bind(constant)\n    .bindVars(modelView: modelView)\n    .clearFrame(depthMap)\n    .drawFrame(depthMap)\n  # main path\n    .program(program.main)\n    .bind(constant)\n    .bindVars(\n      modelView: modelView\n      depthMap: depthMap.color\n    )\n    .clear()\n    .draw()\n  # wireframe\n    .program(program.wireframe)\n    .bind(constant)\n    .bindVars(modelView: modelView)\n    .draw('LINES')\n  requestAnimationFrame update\n\nxhrget '../assets/kvyI0', main"},"html":{"language":"html","content":""},"css":{"language":"css","content":"html, body {\n  margin: 0;\n  padding: 0;\n  overflow: hidden;\n}\ncanvas {\n  margin: -24px;\n}"},"published":"2013-07-24T23:59:31"}