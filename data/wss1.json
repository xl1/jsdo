{"name":"wss1","title":"水っぽいの","description":"<div class=\"markdown\"><ul>\n<li>&#x30C6;&#x30AF;&#x30B9;&#x30C1;&#x30E3;&#x306F; <a href=\"http://www.humus.name\">Emil Persson (Humus) &#x6C0F;</a> &#x306B;&#x3088;&#x308B;&#x3082;&#x306E;&#x3067;&#x3059;&#x3002;\n<a href=\"http://creativecommons.org/licenses/by/3.0/\">Creative Commons Attribution 3.0 Unported License</a> &#x306B;&#x3082;&#x3068;&#x3065;&#x3044;&#x3066;&#x4F7F;&#x7528;&#x3092;&#x8A31;&#x8AFE;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;</li>\n<li>&#x6C34;&#x9762;&#x306E;&#x9AD8;&#x3055;&#x3092;&#x8A08;&#x7B97;&#x3059;&#x308B;&#x306E;&#x306F; <a href=\"http://jsdo.it/xl1/j6ht\">http://jsdo.it/xl1/j6ht</a>, &#x30A8;&#x30CD;&#x30EB;&#x30AE;&#x30FC;&#x304C;&#x5931;&#x308F;&#x308C;&#x306A;&#x3044;&#x306E;&#x3067;&#x6CE2;&#x304C;&#x6D88;&#x3048;&#x306A;&#x304B;&#x3063;&#x305F;&#x308A;&#x6CE2;&#x306E;&#x5E83;&#x304C;&#x308A;&#x65B9;&#x304C;&#x3059;&#x3053;&#x3057;&#x304A;&#x304B;&#x3057;&#x3044;&#x3068;&#x3053;&#x308D;&#x306F;&#x3042;&#x308B;</li>\n<li>&#x5965;&#x306E;&#x307B;&#x3046;&#x3082;&#x7D30;&#x304B;&#x3055;&#x8003;&#x616E;&#x3057;&#x3066;&#x306A;&#x3044;&#x306E;&#x3067;&#x3056;&#x3089;&#x3056;&#x3089;&#x3057;&#x3066;&#x308B;&#x3060;&#x3051;&#x306B;&#x898B;&#x3048;&#x308B;</li>\n</ul>\n</div>","libraries":["/xl1/eHqL"],"js":{"language":"coffeescript","content":"# shaders\nvshader = \n  main: '''\n    attribute vec2 position;\n    uniform mat4 perspective;\n    uniform mat4 modelView;\n    uniform sampler2D height;\n    uniform float index;\n    uniform float size;\n\n    varying vec3 v_refF;\n    varying vec3 v_refN;\n    varying float v_F;\n\n    float ht(float x, float y){\n      vec2 ref = position + vec2(x, y) / size;\n      return texture2D(height, ref).z - 0.5;\n    }\n    void main(){\n      vec4 pos = modelView * vec4(position, ht(0.0, 0.0), 1.0);\n      vec3 normal = normalize(mat3(modelView) * vec3(\n        ht(1.0, 0.0) - ht(-1.0, 0.0),\n        ht(0.0, 1.0) - ht(0.0, -1.0),\n        2.0\n      ));\n      v_refF = reflect(pos.xyz, normal);\n      v_refN = refract(normalize(pos.xyz), normal, 1.0 / index);\n      float f = (index - 1.0) / (index + 1.0);\n      float t = dot(normalize(pos.xyz), normal);\n      v_F = mix(pow(1.0 + t, 5.0), 1.0, f * f);\n\n      gl_Position = perspective * pos;\n    }\n  '''\n  pass: '''\n    attribute vec2 position;\n    void main(){\n      gl_Position = vec4(position, 0.0, 1.0);\n    }\n  '''\n  background: '''\n    attribute vec3 position;\n    attribute vec3 normal;\n    void main(){\n      gl_Position\n    }\n  '''\n\nfshader =\n  main: '''\n    precision mediump float;\n    uniform samplerCube texture;\n    varying vec3 v_refF;\n    varying vec3 v_refN;\n    varying float v_F;\n\n    void main(){\n      gl_FragColor = mix(\n        textureCube(texture, v_refN), textureCube(texture, v_refF), v_F\n      );\n    }\n  '''\n  velocity: '''\n    precision mediump float;\n    uniform float size;\n    uniform sampler2D velocity;\n    uniform sampler2D height;\n\n    float ht(float x, float y){\n      vec2 ref = (gl_FragCoord.xy + vec2(x, y)) / size;\n      return texture2D(height, ref).z - 0.5;\n    }\n    float vel(){\n      vec2 ref = gl_FragCoord.xy / size;\n      return texture2D(velocity, ref).z - 0.5;\n    }\n    void main(){\n      float result = 0.5 + vel() + 0.04 * (\n        ht(-1.0, 0.0) + ht(0.0, -1.0) +\n        ht(0.0, 1.0) + ht(1.0, 0.0) - 4.0 * ht(0.0, 0.0)\n      );\n      gl_FragColor = vec4(0.0, result, result, 1.0);\n    }\n  '''\n  height: '''\n    precision mediump float;\n    uniform vec2 mouse;\n    uniform float size;\n    uniform sampler2D velocity;\n    uniform sampler2D height;\n\n    void main(){\n      vec2 ref = gl_FragCoord.xy / size;\n      float ht = texture2D(height, ref).z - 0.5;\n      float vel = texture2D(velocity, ref).z - 0.5;\n      float result = distance(mouse, gl_FragCoord.xy) < 1.0\n        ? 1.0\n        : 0.5 + ht + vel;\n      gl_FragColor = vec4(0.0, result, result, 1.0);\n    }\n  '''\n\n# global variables\ngl = new MicroGL(antialias: true)\nmouse = { x:0, y:0 }\nprogram = {}\nconstant = {}\nvelocity = null\nheight = null\nsize = 256\nrefractIndex = 2\n\ncreateSurface = ->\n  surface = []\n  for y in [0...size] by 1\n    surface.push 0, y / size\n    for x in [0..size] by 1\n      surface.push(\n        x / size, y / size, x / size, (y + 1) / size\n      )\n    surface.push 1, (y + 1) / size\n  surface\n\nmain = (tex) ->\n  gl.init(document.body, size, size)\n\n  # initialize programs\n  program.velocity = gl.makeProgram(vshader.pass, fshader.velocity)\n  program.height = gl.makeProgram(vshader.pass, fshader.height)\n  program.main = gl.makeProgram(vshader.main, fshader.main)\n\n  # constants\n  d = 1 - 2 / size\n  constant.frame = gl.program(program.height).variable(\n    position: [-d, -d, -d, d, d, -d, d, d]\n    size: size\n  )\n  constant.main = gl.program(program.main).variable(\n    position: createSurface()\n    perspective: [2,0,0,0, 0,2,0,0, 0,0,1.01,1, 0,0,-1.01,0]\n    modelView: [\n      4, 0, 0, 0\n      0, 2, 2 * 1.732, 0\n      0, 0.01732, -0.01, 0\n      -2, -0.3, 1, 1\n    ]\n    size: size\n    texture: tex\n  )\n  \n  # initialize framebuffers\n  velocity = gl.frame()\n  height = gl.frame()\n  gl.program(vshader.pass, '''\n    precision mediump float; void main(){ gl_FragColor = vec4(vec3(.5),1.); }\n  ''')\n    .bindVars(position: [-1, -1, -1, 1, 1, -1, 1, 1])\n    .drawFrame(velocity)\n    .drawFrame(height)\n    \n  gl.gl.canvas.addEventListener 'mousemove', (e) ->\n    mouse.x = e.offsetX\n    mouse.y = size - e.offsetY\n  , false\n  document.getElementById('refract').addEventListener 'change', ->\n    refractIndex = +@.value\n  , false\n\n  update()\n\nupdate = ->\n  # velocity\n  gl.program(program.velocity)\n    .bind(constant.frame)\n    .bindVars(\n      velocity: velocity.color\n      height: height.color\n    )\n    .drawFrame(velocity)\n  # height\n    .program(program.height)\n    .bind(constant.frame)\n    .bindVars(\n      mouse: [mouse.x, mouse.y]\n      velocity: velocity.color\n      height: height.color\n    )\n    .drawFrame(height)\n  # main\n    .program(program.main)\n    .bind(constant.main)\n    .bindVars(\n      height: height.color\n      index: refractIndex\n    )\n    .clear()\n    .draw()\n\n  requestAnimationFrame update\n\ngl.textureCube [\n  '../assets/oEHGT.jpg'\n  '../assets/vVzgp.jpg'\n  '../assets/xAiR1.jpg'\n  '../assets/4Vw7Y.jpg'\n  '../assets/1jrno.jpg'\n  '../assets/e00EY.jpg'\n], null, main"},"html":{"language":"html","content":"<div>\n  屈折率 (1.0 - 10.0)\n  <input id=\"refract\" type=\"range\" min=\"1\" max=\"10\" step=\"any\" value=\"2\">\n</div>"},"css":{"language":"css","content":""},"published":"2013-06-21T09:25:10"}