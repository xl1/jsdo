{"name":"lIRS","title":"モーションブラー(2)","description":"<div class=\"markdown\"><p>&#x3053;&#x308C;&#x306F;&#x901F;&#x5EA6;&#x30DE;&#x30C3;&#x30D7;&#x3092;&#x4F5C;&#x3063;&#x3066;&#x753B;&#x50CF;&#x51E6;&#x7406;&#x7684;&#x306B;&#x30D6;&#x30E9;&#x30FC;&#x3092;&#x639B;&#x3051;&#x308B;&#x65B9;&#x6CD5;&#x3001;16 &#x56DE;&#x5206;&#x30B5;&#x30F3;&#x30D7;&#x30EB;&#x3057;&#x3066;&#x3044;&#x308B;</p>\n\n<p><a href=\"http://game.watch.impress.co.jp/docs/20070131/3dlp.htm\">http://game.watch.impress.co.jp/docs/20070131/3dlp.htm</a> &#x3084; <a href=\"http://asura.iaigiri.com/OpenGL/gl35.html\">http://asura.iaigiri.com/OpenGL/gl35.html</a> &#x306E;&#x65B9;&#x6CD5;</p>\n</div>","libraries":["/xl1/eHqL"],"js":{"language":"coffeescript","content":"# forked from xl1's \"モーションブラー(1)\" http://jsdo.it/xl1/j0Er\n# shaders\nvshader =\n  noblur: '''\n    attribute vec3 position;\n    attribute vec3 normal;\n    uniform mat4 modelView;\n    uniform mat4 perspective;\n    varying vec3 vNormal;\n\n    void main(){\n      gl_Position = perspective * modelView * vec4(position, 1.0);\n      vNormal = mat3(modelView) * normal;\n    }\n  '''\n  velmap: '''\n    attribute vec3 position;\n    attribute vec3 normal;\n    uniform mat4 modelView;\n    uniform mat4 prevModelView;\n    uniform mat4 perspective;\n    varying vec2 velocity;\n\n    void main(){\n      vec4 pos = modelView * vec4(position, 1.0);\n      vec4 ppos = prevModelView * vec4(position, 1.0);\n      vec3 vel = (pos - ppos).xyz;\n      vec3 nrm = mat3(modelView) * normal;\n      \n      vec4 posproj = perspective * pos;\n      vec4 pposproj = perspective * ppos;\n\n      gl_Position = (dot(nrm, vel) >= 0.0) ? posproj : pposproj;\n      velocity = posproj.xy / posproj.w - pposproj.xy / pposproj.w;\n    }\n  '''\n  noop: '''\n    attribute vec2 position;\n    void main(){ gl_Position = vec4(position, 0.0, 1.0); }\n  '''\n\nfshader =\n  noblur: '''\n    precision mediump float;\n    uniform vec3 light;\n    varying vec3 vNormal;\n\n    void main(){\n      vec3 color = dot(normalize(light), vNormal) * vec3(1.0, 1.0, 0.0);\n      float depth = gl_FragCoord.z / gl_FragCoord.w / 100.0;\n      gl_FragColor = vec4(color + vec3(0.1), depth);\n    }\n  '''\n  velmap: '''\n    precision mediump float;\n    varying vec2 velocity;\n    void main(){\n      vec2 vel = fract(clamp(velocity, -0.5, 0.5));\n      gl_FragColor = vec4(vel, 1.0, 1.0);\n    }\n  '''\n  main: '''\n    precision mediump float;\n    uniform sampler2D noblur;\n    uniform sampler2D velmap;\n    uniform float size;\n    void main(){\n      vec2 ref = gl_FragCoord.xy / size;\n      vec2 vel = fract(texture2D(velmap, ref).xy + vec2(0.5)) - vec2(0.5);\n\n      vec4 target = texture2D(noblur, ref);\n      float baseDepth = target.w;\n      vec3 color = target.rgb;\n      float count = 1.0;\n      for(int i = 1; i < 16; i++) {\n        target = texture2D(noblur, ref + vel * float(i) / 15.0);\n        if(target.w <= baseDepth + 0.01){\n          // 手前になかったら足す\n          count += 1.0;\n          color += target.rgb;\n        }\n      }\n      gl_FragColor = vec4(color / count, 1.0);\n    }\n  '''\n\n# utility functions\nxhrget = (url, callback) ->\n  xhr = new XMLHttpRequest\n  xhr.open('GET', url, true)\n  xhr.onload = -> callback(xhr.responseText)\n  xhr.send(null)\n\n\ngl = new MicroGL()\nprogram = {}\nconstant = {}\nframe = {}\nstartT = 0\nmodelView = [\n  1, 0, 0, 0\n  0, 1, 0, 0\n  0, 0, 1, 0\n  0, 0,30, 1\n]\n\nmain = (json) ->\n  teapot = JSON.parse(json).Teapot01\n\n  gl.init(document.body)\n  \n  program.noblur = gl.makeProgram(vshader.noblur, fshader.noblur)\n  program.velmap = gl.makeProgram(vshader.velmap, fshader.velmap)\n  program.main = gl.makeProgram(vshader.noop, fshader.main)\n\n  constant.noblur = gl.program(program.noblur).variable {\n    position: teapot.position\n    normal: teapot.normal\n    INDEX: teapot.INDEX\n    perspective: [\n      2, 0, 0, 0\n      0, 2, 0, 0\n      0, 0, 1.01, 1\n      0, 0, -1.01, 0\n    ]\n    light: [1, 1, -0.5]\n  }\n  constant.main = gl.program(program.main).variable {\n    position: [-1, -1, -1, 1, 1, -1, 1, 1]\n    size: gl.width\n  }\n\n  frame.noblur = gl.frame()\n  frame.velmap = gl.frame()\n\n  updating.addEventListener 'change', ->\n    if @checked then update()\n  , false\n\n  startT = Date.now()\n  update()\n\nupdate = ->\n  return unless updating.checked\n\n  t = 0.005 * (Date.now() - startT)\n  prevModelView = new Float32Array(modelView)\n  modelView = [\n    Math.cos(t), 0, -Math.sin(t), 0\n    0, 1, 0, 0\n    Math.sin(t), 0, Math.cos(t), 0\n    0, 0,30, 1\n  ]\n  \n  # draw without blurring\n  gl.program(program.noblur)\n    .bind(constant.noblur)\n    .bindVars({ modelView })\n    .clearFrame(frame.noblur)\n    .drawFrame(frame.noblur)\n  # create velocity map\n    .program(program.velmap)\n    .bind(constant.noblur)\n    .bindVars({ modelView, prevModelView })\n    .clearFrame(frame.velmap)\n    .drawFrame(frame.velmap)\n  # main path\n    .program(program.main)\n    .bind(constant.main)\n    .bindVars({ noblur: frame.noblur.color, velmap: frame.velmap.color })\n    .clear()\n    .draw()\n\n  requestAnimationFrame update\n\nxhrget '../assets/kvyI0', main"},"html":{"language":"html","content":"<div>\n  <label><input type=\"checkbox\" id=\"updating\" checked> updating</label>\n</div>"},"css":{"language":"css","content":""},"published":"2013-06-19T23:41:28"}