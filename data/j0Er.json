{"name":"j0Er","title":"モーションブラー(1)","description":"<div class=\"markdown\"><p>&#x307E;&#x305A;&#x306F;&#x666E;&#x901A;&#x306B;&#x4F55;&#x56DE;&#x304B;&#x63CF;&#x753B;&#x3057;&#x3066;&#x5E73;&#x5747;&#x3059;&#x308B;&#x65B9;&#x6CD5;&#xFF08;&#x3053;&#x308C;&#x306F; 4 &#x56DE;&#x63CF;&#x3044;&#x3066;&#x308B;&#xFF09;</p>\n</div>","libraries":["/xl1/eHqL"],"js":{"language":"coffeescript","content":"# shaders\nvshader =\n  noop: '''\n    attribute vec2 position;\n    void main(){ gl_Position = vec4(position, 0.0, 1.0); }\n  '''\n  main: '''\n    attribute vec3 position;\n    attribute vec3 normal;\n    uniform mat4 modelView;\n    uniform mat4 prevModelView;\n    uniform float localTime;\n    uniform mat4 perspective;\n    varying vec3 vNormal;\n\n    void main(){\n      vec4 pos = modelView * vec4(position, 1.0);\n      vec4 ppos = prevModelView * vec4(position, 1.0);\n      gl_Position = perspective * mix(pos, ppos, localTime);\n\n      vec3 nrm = mat3(modelView) * normal;\n      vec3 pnrm = mat3(prevModelView) * normal;\n      vNormal = mix(nrm, pnrm, localTime);\n    }\n  '''\n\nfshader =\n  blend: '''\n    precision mediump float;\n    uniform sampler2D tex;\n    uniform float size;\n    void main(){\n      gl_FragColor = vec4(texture2D(tex, gl_FragCoord.xy / size).rgb, 0.25);\n    }\n  '''\n  main: '''\n    precision mediump float;\n    \n    uniform vec3 light;\n    varying vec3 vNormal;\n\n    void main(){\n      vec3 color = dot(normalize(light), vNormal) * vec3(1.0, 1.0, 0.0);\n      gl_FragColor = vec4(color + vec3(0.1), 1.0);\n    }\n  '''\n\n# utility functions\nxhrget = (url, callback) ->\n  xhr = new XMLHttpRequest\n  xhr.open('GET', url, true)\n  xhr.onload = -> callback(xhr.responseText)\n  xhr.send(null)\n\n\ngl = new MicroGL()\nprogram = {}\nconstant = {}\nframes = []\nstartT = 0\nmodelView = [\n  1, 0, 0, 0\n  0, 1, 0, 0\n  0, 0, 1, 0\n  0, 0,30, 1\n]\n\nmain = (json) ->\n  teapot = JSON.parse(json).Teapot01\n\n  gl.init(document.body).blend('add')\n  \n  program.main = gl.makeProgram(vshader.main, fshader.main)\n  program.blend = gl.makeProgram(vshader.noop, fshader.blend)\n\n  constant.main = gl.program(program.main).variable {\n    position: teapot.position\n    normal: teapot.normal\n    INDEX: teapot.INDEX\n    perspective: [\n      2, 0, 0, 0\n      0, 2, 0, 0\n      0, 0, 1.01, 1\n      0, 0, -1.01, 0\n    ]\n    light: [1, 1, -0.5]\n  }\n  constant.blend = gl.program(program.blend).variable {\n    position: [-1, -1, -1, 1, 1, -1, 1, 1]\n    size: gl.width\n  }\n\n  frames = (gl.frame() for i in [0, 1, 2, 3])\n\n  updating.addEventListener 'change', ->\n    update() if @checked\n  , false\n\n  startT = Date.now()\n  update()\n\nupdate = ->\n  return unless updating.checked\n\n  t = 0.005 * (Date.now() - startT)\n  prevModelView = new Float32Array(modelView)\n  modelView = [\n    Math.cos(t), 0, -Math.sin(t), 0\n    0, 1, 0, 0\n    Math.sin(t), 0, Math.cos(t), 0\n    0, 0,30, 1\n  ]\n\n  gl.gl.enable(gl.gl.DEPTH_TEST)\n  gl.blend(false)\n    .program(program.main)\n    .bind(constant.main)\n    .bindVars({ modelView, prevModelView })\n  for frame, i in frames\n    gl.bindVars(localTime: i / 3)\n      .clearFrame(frame)\n      .drawFrame(frame)\n\n  gl.gl.disable(gl.gl.DEPTH_TEST)\n  gl.blend(true)\n    .program(program.blend)\n    .bind(constant.blend)\n    .clear()\n  for frame in frames\n    gl.bindVars(tex: frame.color).draw()\n    \n  requestAnimationFrame update\n\nxhrget '../assets/kvyI0', main"},"html":{"language":"html","content":"<div>\n  <label><input type=\"checkbox\" id=\"updating\" checked> updating</label>\n</div>"},"css":{"language":"css","content":""},"published":"2013-06-19T23:39:11"}