{"name":"ip7z","title":"forked: particle 65536","description":"<div class=\"markdown\"><p>&#x3053;&#x306E;&#x3088;&#x3046;&#x306B;&#x9802;&#x70B9;&#x30B7;&#x30A7;&#x30FC;&#x30C0;&#x3067;&#x30C6;&#x30AF;&#x30B9;&#x30C1;&#x30E3;&#x53C2;&#x7167;&#x3067;&#x304D;&#x308B;&#x306A;&#x3089;&#x3001;&#x305D;&#x306E;&#x307B;&#x3046;&#x304C;&#x30D1;&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30F3;&#x30B9;&#x7684;&#x306B;&#x3082;&#x3088;&#x3044;&#x3068;&#x304A;&#x3082;&#x3046;</p>\n\n<h3>2013/9/30 &#x66F4;&#x65B0;</h3>\n\n<ul>\n<li>&#x6BCE;&#x30D5;&#x30EC;&#x30FC;&#x30E0; <code>webgl.bufferData(..., new Float32Array(value), ...)</code> &#x3059;&#x308B;&#x3068;&#x30E1;&#x30E2;&#x30EA;&#x304C;&#x958B;&#x653E;&#x3055;&#x308C;&#x306A;&#x3044; (Chrome dev 31 on Windows 7)&#x3002;</li>\n<li>&#x3042;&#x308B;&#x3044;&#x306F;&#x3001;GC &#x304C;&#x8D70;&#x3063;&#x3066;&#x3044;&#x308B;&#x9593;&#x4E00;&#x6642;&#x505C;&#x6B62;&#x3057;&#x3066;&#x3057;&#x307E;&#x3046; (Chrome 29 on Android 4.1.2)&#x3002;</li>\n<li>&#x4EE5;&#x524D;&#x306F;&#x3001;Andorid &#x3067;&#x306F;&#x8868;&#x793A;&#x304C;&#x3067;&#x304D;&#x306A;&#x3044;&#x3053;&#x3068;&#x304C;&#x3042;&#x3063;&#x305F;&#x3082;&#x306E;&#x306E;&#x3001;Win7 &#x3067;&#x306F;&#x304D;&#x3061;&#x3093;&#x3068;&#x30E1;&#x30E2;&#x30EA;&#x304C;&#x958B;&#x653E;&#x3055;&#x308C;&#x3066;&#x554F;&#x984C;&#x306A;&#x304F;&#x52D5;&#x3044;&#x3066;&#x3044;&#x305F;&#x3068;&#x601D;&#x3046;</li>\n<li>&#x5BFE;&#x7B56;&#x3068;&#x3057;&#x3066;&#x3001;&#x6700;&#x521D;&#x306B; <code>microgl.variable()</code> &#x3067;&#x4F5C;&#x3063;&#x305F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x4F7F;&#x3044;&#x307E;&#x308F;&#x3059;&#x3053;&#x3068;&#x306B;&#x3057;&#x305F;\n&#xFF08;&#x30D5;&#x30A9;&#x30FC;&#x30AF;&#x5143;&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x3067;&#x306F;&#x6BCE;&#x30D5;&#x30EC;&#x30FC;&#x30E0; <code>webgl.readPixels()</code> &#x3057;&#x3066;&#x3044;&#x308B;&#x306E;&#x3067;&#x3001;&#x305D;&#x308C;&#x306F;&#x3067;&#x304D;&#x306A;&#x3044;&#xFF09;&#x3002;</li>\n<li><a href=\"https://dl.dropboxusercontent.com/u/9127339/static/jsdoit/Screenshot_2013-09-30-00-47-48.png\">Chrome for Andorid &#x3067;&#x52D5;&#x3044;&#x3066;&#x3044;&#x308B;&#x69D8;&#x5B50;</a></li>\n</ul>\n</div>","libraries":["/xl1/eHqL"],"js":{"language":"coffeescript","content":"# shader programs\nvshader = \n  map: '''\n    attribute vec2 position;\n    void main(){\n      gl_Position = vec4(position, 0.0, 1.0);\n    }\n  '''\n  main: '''\n    attribute vec2 reference;\n    uniform sampler2D map;\n    void main(){\n      vec2 pos = (texture2D(map, reference).xy * 255.0 + vec2(0.5)) / 256.0;\n      gl_Position = vec4(2.0 * pos.x - 1.0, pos.y, 0.0, 1.0);\n      gl_PointSize = 1.0;\n    }\n  '''\n\nfshader = \n  map: '''\n    precision mediump float;\n    uniform sampler2D previous;\n    uniform vec2 mouse;\n    uniform float size;\n\n    vec2 random(){\n      return sin(gl_FragCoord.yx * vec2(1234.5, 678.9));\n    }\n\n    void main(){\n      vec2 result;\n      vec2 ref = gl_FragCoord.xy / vec2(size, size * 2.0);\n      vec2 velref = mod(ref, vec2(1.0, 0.5));\n      vec2 posref = velref + vec2(0.0, 0.5);\n      vec2 vel = texture2D(previous, velref).xy - vec2(0.5);\n      vec2 pos = texture2D(previous, posref).xy;\n      vec2 dif = mouse - pos;\n      float len2 = dif.x * dif.x + dif.y * dif.y;\n      if(ref.y < 0.5){\n        // lower half: velocity\n        result = (0.97 * vel) + (0.009 * dif / len2) + (0.002 * random()) + vec2(0.5);\n      } else {\n        // upper half: position\n        result = fract(0.07 * vel + pos);\n      }\n      gl_FragColor = vec4(result, 0.0, 1.0);\n    }\n  '''\n  main: '''\n    precision mediump float;\n    void main(){\n      gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);\n    }\n  '''\n\n# main\nsize = 256\ngl = new MicroGL(antialias: false)\nprogram = {}\nframe = null\nreference = null\nmouse = { x:0.5, y:0.5 }\n\ninitMap = ->\n  ctx = document.createElement('canvas').getContext '2d'\n  ctx.canvas.width = size\n  ctx.canvas.height = size * 2\n  idata = ctx.createImageData(size, size * 2)\n  for idx in [0...size * size * 8] by 4\n    idata.data.set [\n      Math.random() * 256\n      Math.random() * 256\n      0, 255\n    ], idx\n  ctx.putImageData(idata, 0, 0)\n  gl.program(program.map)\n    .bindVars(\n      position: [-1,-1,-1,1,1,-1,1,1]\n      size: size\n      mouse: [0.5, 0.5]\n      previous: ctx.canvas\n    )\n    .drawFrame(frame)\n\ninitAttribute = ->\n  ary = []\n  for x in [0...256]\n    for y in [0...256]\n      ary.push (x + 0.5) / size, (y + 0.5) / size / 2 + 0.5\n  reference = gl.program(program.main).variable(reference: ary)\n\nmain = ->\n  gl.init(document.body, size, size * 2)\n  program.main = gl.makeProgram vshader.main, fshader.main\n  program.map  = gl.makeProgram vshader.map, fshader.map\n  frame = gl.frame()\n  \n  gl.gl.canvas.addEventListener 'mousemove', (e) ->\n    mouse.x = e.offsetX / size\n    mouse.y = Math.max(0, 1 - e.offsetY / size)\n  , false\n\n  initMap()\n  initAttribute()\n  update()\n\nupdate = ->\n  # update position & velocity map\n  gl.program(program.map)\n    .bindVars(\n      position: [-1,-1,-1,1,1,-1,1,1]\n      size: size\n      previous: frame.color\n      mouse: [mouse.x, mouse.y]\n    )\n    .drawFrame(frame)\n  # draw particles\n    .program(program.main)\n    .bind(reference)\n    .bindVars(\n      map: frame.color\n    )\n    .clear()\n    .draw('POINTS')\n  requestAnimationFrame update\n  \nmain()"},"html":{"language":"html","content":""},"css":{"language":"css","content":"* {\n  margin: 0;\n  padding: 0;\n  border: 0;\n}"},"published":"2013-09-30T00:52:23"}